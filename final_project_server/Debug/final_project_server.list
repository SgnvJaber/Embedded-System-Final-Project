
final_project_server.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000157c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  0800171c  0800171c  0001171c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800193c  0800193c  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  0800193c  0800193c  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800193c  0800193c  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800193c  0800193c  0001193c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001940  08001940  00011940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001944  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008fc  20000064  080019a8  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000960  080019a8  00020960  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006172  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000133e  00000000  00000000  00026206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000290  00000000  00000000  00027548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001d8  00000000  00000000  000277d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019971  00000000  00000000  000279b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003c30  00000000  00000000  00041321  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000875eb  00000000  00000000  00044f51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cc53c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000b08  00000000  00000000  000cc590  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001704 	.word	0x08001704

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	08001704 	.word	0x08001704

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <CB_init>:
#include "types.h"
#include "buffer.h"

// This buffer is used to handle commands.
// A function to to initializes an empty CYCLIC_BUFFER
void CB_init(CYCLIC_BUFFER *buffer) {
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
	//Initialize p_read and p_write to the start of the array.
	buffer->p_read = buffer->array;
 80002b8:	687a      	ldr	r2, [r7, #4]
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	buffer->p_write = buffer->array;
 80002c0:	687a      	ldr	r2, [r7, #4]
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	// p_end set to point at the last character of the buffer,
	buffer->p_end = buffer->array + BUFFER_SIZE;
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	f503 7200 	add.w	r2, r3, #512	; 0x200
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
}
 80002d4:	bf00      	nop
 80002d6:	370c      	adds	r7, #12
 80002d8:	46bd      	mov	sp, r7
 80002da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002de:	4770      	bx	lr

080002e0 <CB_read>:

// A function that return the current data that p_read is pointing at
uint32_t CB_read(CYCLIC_BUFFER *buffer) {
 80002e0:	b480      	push	{r7}
 80002e2:	b085      	sub	sp, #20
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
	uint32_t data = *(buffer->p_read);
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	60fb      	str	r3, [r7, #12]
	buffer->p_read++;
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80002f8:	1d1a      	adds	r2, r3, #4
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	if (buffer->p_read == buffer->p_end) {
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800030c:	429a      	cmp	r2, r3
 800030e:	d103      	bne.n	8000318 <CB_read+0x38>
		//Return p_read to the start of the array.
		buffer->p_read = buffer->array;
 8000310:	687a      	ldr	r2, [r7, #4]
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	}
	return data;
 8000318:	68fb      	ldr	r3, [r7, #12]
}
 800031a:	4618      	mov	r0, r3
 800031c:	3714      	adds	r7, #20
 800031e:	46bd      	mov	sp, r7
 8000320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000324:	4770      	bx	lr

08000326 <CB_write>:
// A function to write data to CYCLIC_BUFFER,
// The data will be written the the slot p_write is pointing at.
void CB_write(uint32_t data, CYCLIC_BUFFER *buffer) {
 8000326:	b480      	push	{r7}
 8000328:	b083      	sub	sp, #12
 800032a:	af00      	add	r7, sp, #0
 800032c:	6078      	str	r0, [r7, #4]
 800032e:	6039      	str	r1, [r7, #0]
	*(buffer->p_write) = data;
 8000330:	683b      	ldr	r3, [r7, #0]
 8000332:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000336:	687a      	ldr	r2, [r7, #4]
 8000338:	601a      	str	r2, [r3, #0]
	buffer->p_write++;
 800033a:	683b      	ldr	r3, [r7, #0]
 800033c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000340:	1d1a      	adds	r2, r3, #4
 8000342:	683b      	ldr	r3, [r7, #0]
 8000344:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	// If p_write reached the end of the array,return it to the start of the array
	if (buffer->p_write == buffer->p_end) {
 8000348:	683b      	ldr	r3, [r7, #0]
 800034a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800034e:	683b      	ldr	r3, [r7, #0]
 8000350:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8000354:	429a      	cmp	r2, r3
 8000356:	d103      	bne.n	8000360 <CB_write+0x3a>
		//Return p_write to the start of the array.
		buffer->p_write = buffer->array;
 8000358:	683a      	ldr	r2, [r7, #0]
 800035a:	683b      	ldr	r3, [r7, #0]
 800035c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	}
}
 8000360:	bf00      	nop
 8000362:	370c      	adds	r7, #12
 8000364:	46bd      	mov	sp, r7
 8000366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036a:	4770      	bx	lr

0800036c <CB_isEmpty>:
// A function to check if a given CYCLIC_BUFFER is empty
BOOL CB_isEmpty(CYCLIC_BUFFER *buffer) {
 800036c:	b480      	push	{r7}
 800036e:	b083      	sub	sp, #12
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
	// if p_read is pointing at the same slot as p_write,
	// then the array is empty,otherwise it is not.
	return buffer->p_read == buffer->p_write;
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000380:	429a      	cmp	r2, r3
 8000382:	bf0c      	ite	eq
 8000384:	2301      	moveq	r3, #1
 8000386:	2300      	movne	r3, #0
 8000388:	b2db      	uxtb	r3, r3
}
 800038a:	4618      	mov	r0, r3
 800038c:	370c      	adds	r7, #12
 800038e:	46bd      	mov	sp, r7
 8000390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000394:	4770      	bx	lr
	...

08000398 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000398:	b480      	push	{r7}
 800039a:	b083      	sub	sp, #12
 800039c:	af00      	add	r7, sp, #0
 800039e:	4603      	mov	r3, r0
 80003a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	db0b      	blt.n	80003c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80003aa:	79fb      	ldrb	r3, [r7, #7]
 80003ac:	f003 021f 	and.w	r2, r3, #31
 80003b0:	4907      	ldr	r1, [pc, #28]	; (80003d0 <__NVIC_EnableIRQ+0x38>)
 80003b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003b6:	095b      	lsrs	r3, r3, #5
 80003b8:	2001      	movs	r0, #1
 80003ba:	fa00 f202 	lsl.w	r2, r0, r2
 80003be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80003c2:	bf00      	nop
 80003c4:	370c      	adds	r7, #12
 80003c6:	46bd      	mov	sp, r7
 80003c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop
 80003d0:	e000e100 	.word	0xe000e100

080003d4 <BUTTON_init>:
#include "button.h"
#include "stm32f303xe.h"
#include "event_queue.h"
#include "usart1.h"
#include "usart2.h"
void BUTTON_init(void) {
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0
	// Enable the GPIOC clock.
	RCC->AHBENR |= 0x00080000;
 80003d8:	4b11      	ldr	r3, [pc, #68]	; (8000420 <BUTTON_init+0x4c>)
 80003da:	695b      	ldr	r3, [r3, #20]
 80003dc:	4a10      	ldr	r2, [pc, #64]	; (8000420 <BUTTON_init+0x4c>)
 80003de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80003e2:	6153      	str	r3, [r2, #20]
	// Enable the SYSCFG clock. This is necessary for connecting PC13 to EXTI13.
	RCC->APB2ENR |= 0x00000001;
 80003e4:	4b0e      	ldr	r3, [pc, #56]	; (8000420 <BUTTON_init+0x4c>)
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	4a0d      	ldr	r2, [pc, #52]	; (8000420 <BUTTON_init+0x4c>)
 80003ea:	f043 0301 	orr.w	r3, r3, #1
 80003ee:	6193      	str	r3, [r2, #24]
	// Connect PC13 to EXTI13. See p. 252 of the reference manual.
	// Note that the reference manual counts the registers beginning with EXTICR from
	// 1 to 4,
	// while the h-file stm32f303xe.h defines the registers as an array of size 4.
	// So EXTICR4 in the reference manual is EXTICR[3] in the program.
	SYSCFG->EXTICR[3] |= 0x00000020;
 80003f0:	4b0c      	ldr	r3, [pc, #48]	; (8000424 <BUTTON_init+0x50>)
 80003f2:	695b      	ldr	r3, [r3, #20]
 80003f4:	4a0b      	ldr	r2, [pc, #44]	; (8000424 <BUTTON_init+0x50>)
 80003f6:	f043 0320 	orr.w	r3, r3, #32
 80003fa:	6153      	str	r3, [r2, #20]
	// Set EXTI13 to be triggered by a falling edge.
	EXTI->FTSR |= 0x00002000;
 80003fc:	4b0a      	ldr	r3, [pc, #40]	; (8000428 <BUTTON_init+0x54>)
 80003fe:	68db      	ldr	r3, [r3, #12]
 8000400:	4a09      	ldr	r2, [pc, #36]	; (8000428 <BUTTON_init+0x54>)
 8000402:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000406:	60d3      	str	r3, [r2, #12]
	// Enable EXTI13.
	EXTI->IMR |= 0x00002000;
 8000408:	4b07      	ldr	r3, [pc, #28]	; (8000428 <BUTTON_init+0x54>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	4a06      	ldr	r2, [pc, #24]	; (8000428 <BUTTON_init+0x54>)
 800040e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000412:	6013      	str	r3, [r2, #0]
	// Enable the interrupt handler for EXTI13.
	NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000414:	2028      	movs	r0, #40	; 0x28
 8000416:	f7ff ffbf 	bl	8000398 <__NVIC_EnableIRQ>
}
 800041a:	bf00      	nop
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	40021000 	.word	0x40021000
 8000424:	40010000 	.word	0x40010000
 8000428:	40010400 	.word	0x40010400

0800042c <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void) {
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
	EVENT_QUEUE_write(EVENT_BUTTON_PRESSED);
 8000430:	2001      	movs	r0, #1
 8000432:	f000 f829 	bl	8000488 <EVENT_QUEUE_write>
	// Reset the interrupt request flag.
	EXTI->PR |= 0x00002000;
 8000436:	4b04      	ldr	r3, [pc, #16]	; (8000448 <EXTI15_10_IRQHandler+0x1c>)
 8000438:	695b      	ldr	r3, [r3, #20]
 800043a:	4a03      	ldr	r2, [pc, #12]	; (8000448 <EXTI15_10_IRQHandler+0x1c>)
 800043c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000440:	6153      	str	r3, [r2, #20]
}
 8000442:	bf00      	nop
 8000444:	bd80      	pop	{r7, pc}
 8000446:	bf00      	nop
 8000448:	40010400 	.word	0x40010400

0800044c <BUTTON_switch>:

void BUTTON_switch(void) {
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
	USART1_print("AT+CIPSEND=0,8\r\n");
 8000450:	4805      	ldr	r0, [pc, #20]	; (8000468 <BUTTON_switch+0x1c>)
 8000452:	f000 fb7b 	bl	8000b4c <USART1_print>
	print("Sending Command...!\n");
 8000456:	4805      	ldr	r0, [pc, #20]	; (800046c <BUTTON_switch+0x20>)
 8000458:	f000 fbb8 	bl	8000bcc <print>
	USART1_print("switch\r\n");
 800045c:	4804      	ldr	r0, [pc, #16]	; (8000470 <BUTTON_switch+0x24>)
 800045e:	f000 fb75 	bl	8000b4c <USART1_print>
}
 8000462:	bf00      	nop
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	0800171c 	.word	0x0800171c
 800046c:	08001730 	.word	0x08001730
 8000470:	08001748 	.word	0x08001748

08000474 <EVENT_QUEUE_init>:
#include "buffer.h"
//This buffer is used to handle and store commands.
static CYCLIC_BUFFER EVENT_QUEUE;
//A function to initializes an empty EVENT_QUEUE,
//by using the CYCLIC_BUFFER initializer  function.
void EVENT_QUEUE_init(void) {
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
	CB_init(&EVENT_QUEUE);
 8000478:	4802      	ldr	r0, [pc, #8]	; (8000484 <EVENT_QUEUE_init+0x10>)
 800047a:	f7ff ff19 	bl	80002b0 <CB_init>
}
 800047e:	bf00      	nop
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	20000080 	.word	0x20000080

08000488 <EVENT_QUEUE_write>:

//A function to write to data to EVENT_QUEUE,
//by using the CYCLIC_BUFFER write function.
void EVENT_QUEUE_write(uint32_t data) {
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
	CB_write(data, &EVENT_QUEUE);
 8000490:	4903      	ldr	r1, [pc, #12]	; (80004a0 <EVENT_QUEUE_write+0x18>)
 8000492:	6878      	ldr	r0, [r7, #4]
 8000494:	f7ff ff47 	bl	8000326 <CB_write>
}
 8000498:	bf00      	nop
 800049a:	3708      	adds	r7, #8
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	20000080 	.word	0x20000080

080004a4 <EVENT_QUEUE_read>:

//A function to read data from an EVENT_QUEUE,
//by using the CYCLIC_BUFFER read function.
uint32_t EVENT_QUEUE_read(void) {
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b082      	sub	sp, #8
 80004a8:	af00      	add	r7, sp, #0
	uint32_t value = CB_read(&EVENT_QUEUE);
 80004aa:	4804      	ldr	r0, [pc, #16]	; (80004bc <EVENT_QUEUE_read+0x18>)
 80004ac:	f7ff ff18 	bl	80002e0 <CB_read>
 80004b0:	6078      	str	r0, [r7, #4]
	return value;
 80004b2:	687b      	ldr	r3, [r7, #4]
}
 80004b4:	4618      	mov	r0, r3
 80004b6:	3708      	adds	r7, #8
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	20000080 	.word	0x20000080

080004c0 <EVENT_QUEUE_isEmpty>:
//A function to check if an EVENT_QUEUE is empty,
//by using the CYCLIC_BUFFER isEmpty function.
BOOL EVENT_QUEUE_isEmpty(void) {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
	return CB_isEmpty(&EVENT_QUEUE);
 80004c4:	4802      	ldr	r0, [pc, #8]	; (80004d0 <EVENT_QUEUE_isEmpty+0x10>)
 80004c6:	f7ff ff51 	bl	800036c <CB_isEmpty>
 80004ca:	4603      	mov	r3, r0
}
 80004cc:	4618      	mov	r0, r3
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	20000080 	.word	0x20000080

080004d4 <LED_init>:
#include "led.h"
#include "stm32f303xe.h"
#include "scheduler.h"
#include "usart2.h"
static STATE LED = OFF;
void LED_init(void) {
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
	// Enable the GPIOA clock.
	RCC->AHBENR |= 0x00020000;
 80004d8:	4b09      	ldr	r3, [pc, #36]	; (8000500 <LED_init+0x2c>)
 80004da:	695b      	ldr	r3, [r3, #20]
 80004dc:	4a08      	ldr	r2, [pc, #32]	; (8000500 <LED_init+0x2c>)
 80004de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004e2:	6153      	str	r3, [r2, #20]
	// Configure PA5 as output
	// (by default it will then be push pull, see p. 237 of the reference manual).
	GPIOA->MODER |= 0x00000400;
 80004e4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80004ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004f2:	6013      	str	r3, [r2, #0]
}
 80004f4:	bf00      	nop
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	40021000 	.word	0x40021000

08000504 <LED_off>:

void LED_off(void) {
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
	GPIOA->ODR &= ~0x00000020;
 8000508:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800050c:	695b      	ldr	r3, [r3, #20]
 800050e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000512:	f023 0320 	bic.w	r3, r3, #32
 8000516:	6153      	str	r3, [r2, #20]
}
 8000518:	bf00      	nop
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr

08000522 <LED_on>:

void LED_on(void) {
 8000522:	b480      	push	{r7}
 8000524:	af00      	add	r7, sp, #0
	GPIOA->ODR |= 0x00000020;
 8000526:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800052a:	695b      	ldr	r3, [r3, #20]
 800052c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000530:	f043 0320 	orr.w	r3, r3, #32
 8000534:	6153      	str	r3, [r2, #20]
}
 8000536:	bf00      	nop
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr

08000540 <LED_toggle>:

void LED_toggle(void) {
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
	GPIOA->ODR ^= 0x00000020;
 8000544:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000548:	695b      	ldr	r3, [r3, #20]
 800054a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800054e:	f083 0320 	eor.w	r3, r3, #32
 8000552:	6153      	str	r3, [r2, #20]
}
 8000554:	bf00      	nop
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
	...

08000560 <LED_switch>:

//A function to switch LED state.
void LED_switch(void) {
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
	print("Changing!\n");
 8000564:	4809      	ldr	r0, [pc, #36]	; (800058c <LED_switch+0x2c>)
 8000566:	f000 fb31 	bl	8000bcc <print>
	if (LED == BLINKY) {
 800056a:	4b09      	ldr	r3, [pc, #36]	; (8000590 <LED_switch+0x30>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	2b02      	cmp	r3, #2
 8000570:	d103      	bne.n	800057a <LED_switch+0x1a>
		LED = OFF;
 8000572:	4b07      	ldr	r3, [pc, #28]	; (8000590 <LED_switch+0x30>)
 8000574:	2200      	movs	r2, #0
 8000576:	701a      	strb	r2, [r3, #0]
	} else {
		LED++;
	}

}
 8000578:	e005      	b.n	8000586 <LED_switch+0x26>
		LED++;
 800057a:	4b05      	ldr	r3, [pc, #20]	; (8000590 <LED_switch+0x30>)
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	3301      	adds	r3, #1
 8000580:	b2da      	uxtb	r2, r3
 8000582:	4b03      	ldr	r3, [pc, #12]	; (8000590 <LED_switch+0x30>)
 8000584:	701a      	strb	r2, [r3, #0]
}
 8000586:	bf00      	nop
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	08001754 	.word	0x08001754
 8000590:	2000028c 	.word	0x2000028c

08000594 <LED_status>:

//A function that checks LED status.
void LED_status(void) {
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	if (LED == OFF) {
 8000598:	4b0a      	ldr	r3, [pc, #40]	; (80005c4 <LED_status+0x30>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d104      	bne.n	80005aa <LED_status+0x16>
		SCHEDULER_stopBlinking();
 80005a0:	f000 f888 	bl	80006b4 <SCHEDULER_stopBlinking>
		LED_off();
 80005a4:	f7ff ffae 	bl	8000504 <LED_off>
		LED_on();
	} else {
		SCHEDULER_blink();
	}

}
 80005a8:	e00a      	b.n	80005c0 <LED_status+0x2c>
	} else if (LED == ON) {
 80005aa:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <LED_status+0x30>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b01      	cmp	r3, #1
 80005b0:	d104      	bne.n	80005bc <LED_status+0x28>
		SCHEDULER_stopBlinking();
 80005b2:	f000 f87f 	bl	80006b4 <SCHEDULER_stopBlinking>
		LED_on();
 80005b6:	f7ff ffb4 	bl	8000522 <LED_on>
}
 80005ba:	e001      	b.n	80005c0 <LED_status+0x2c>
		SCHEDULER_blink();
 80005bc:	f000 f852 	bl	8000664 <SCHEDULER_blink>
}
 80005c0:	bf00      	nop
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	2000028c 	.word	0x2000028c

080005c8 <main>:
#include "event_queue.h"
#include <string.h>

static char USART1_response[TERMINAL_SIZE_OF_COMMAND_BUFFER];

int main(void) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
	WATCHDOG_init();
 80005ce:	f000 fbb3 	bl	8000d38 <WATCHDOG_init>
	BUTTON_init();
 80005d2:	f7ff feff 	bl	80003d4 <BUTTON_init>
	LED_init();
 80005d6:	f7ff ff7d 	bl	80004d4 <LED_init>
	TIMER2_init();
 80005da:	f000 f9ff 	bl	80009dc <TIMER2_init>
	USART2_init();
 80005de:	f000 fb31 	bl	8000c44 <USART2_init>
	USART1_init();
 80005e2:	f000 fa5b 	bl	8000a9c <USART1_init>
	EVENT_QUEUE_init();
 80005e6:	f7ff ff45 	bl	8000474 <EVENT_QUEUE_init>
	TERMINAL_init();
 80005ea:	f000 f877 	bl	80006dc <TERMINAL_init>

	while (1) {

		if (EVENT_QUEUE_isEmpty() == FALSE) {
 80005ee:	f7ff ff67 	bl	80004c0 <EVENT_QUEUE_isEmpty>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d124      	bne.n	8000642 <main+0x7a>
			uint32_t event = EVENT_QUEUE_read();
 80005f8:	f7ff ff54 	bl	80004a4 <EVENT_QUEUE_read>
 80005fc:	6078      	str	r0, [r7, #4]
			//print("%lu\n",(unsigned long)EVENT_QUEUE_read());
			if (event == EVENT_BUTTON_PRESSED) {
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	2b01      	cmp	r3, #1
 8000602:	d101      	bne.n	8000608 <main+0x40>

				BUTTON_switch();
 8000604:	f7ff ff22 	bl	800044c <BUTTON_switch>

			}
			WATCHDOG_pet();
 8000608:	f000 fbb6 	bl	8000d78 <WATCHDOG_pet>
			if (event == EVENT_USART1_MESSAGE) {
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	2b02      	cmp	r3, #2
 8000610:	d10e      	bne.n	8000630 <main+0x68>
				USART1_getCommand(USART1_response);
 8000612:	4812      	ldr	r0, [pc, #72]	; (800065c <main+0x94>)
 8000614:	f000 fa1e 	bl	8000a54 <USART1_getCommand>
				if (strstr(USART1_response, "switch")) {
 8000618:	4911      	ldr	r1, [pc, #68]	; (8000660 <main+0x98>)
 800061a:	4810      	ldr	r0, [pc, #64]	; (800065c <main+0x94>)
 800061c:	f000 fc1f 	bl	8000e5e <strstr>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <main+0x62>
					LED_switch();
 8000626:	f7ff ff9b 	bl	8000560 <LED_switch>
				}
				USART2_print(USART1_response);
 800062a:	480c      	ldr	r0, [pc, #48]	; (800065c <main+0x94>)
 800062c:	f000 fb62 	bl	8000cf4 <USART2_print>
			}
			WATCHDOG_pet();
 8000630:	f000 fba2 	bl	8000d78 <WATCHDOG_pet>
			if (event == EVENT_USART2_MESSAGE) {
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d101      	bne.n	800063e <main+0x76>
				TERMINAL_handleCommand();
 800063a:	f000 f88b 	bl	8000754 <TERMINAL_handleCommand>
			}
			WATCHDOG_pet();
 800063e:	f000 fb9b 	bl	8000d78 <WATCHDOG_pet>

		}

		if (TIMER2_expired()) {
 8000642:	f000 f9b7 	bl	80009b4 <TIMER2_expired>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <main+0x88>
			SCHEDULER_handle();
 800064c:	f000 f816 	bl	800067c <SCHEDULER_handle>
		}
		WATCHDOG_pet();
 8000650:	f000 fb92 	bl	8000d78 <WATCHDOG_pet>
		LED_status();
 8000654:	f7ff ff9e 	bl	8000594 <LED_status>
		if (EVENT_QUEUE_isEmpty() == FALSE) {
 8000658:	e7c9      	b.n	80005ee <main+0x26>
 800065a:	bf00      	nop
 800065c:	20000290 	.word	0x20000290
 8000660:	08001760 	.word	0x08001760

08000664 <SCHEDULER_blink>:
#include "usart2.h"

static BOOL Blink = FALSE;
static unsigned char Blink_Counter = 0;

void SCHEDULER_blink(void) {
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
	Blink = TRUE;
 8000668:	4b03      	ldr	r3, [pc, #12]	; (8000678 <SCHEDULER_blink+0x14>)
 800066a:	2201      	movs	r2, #1
 800066c:	701a      	strb	r2, [r3, #0]
}
 800066e:	bf00      	nop
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr
 8000678:	20000310 	.word	0x20000310

0800067c <SCHEDULER_handle>:

void SCHEDULER_handle(void) {
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
	if (Blink) {
 8000680:	4b0a      	ldr	r3, [pc, #40]	; (80006ac <SCHEDULER_handle+0x30>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d00e      	beq.n	80006a6 <SCHEDULER_handle+0x2a>
		Blink_Counter++;
 8000688:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <SCHEDULER_handle+0x34>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	3301      	adds	r3, #1
 800068e:	b2da      	uxtb	r2, r3
 8000690:	4b07      	ldr	r3, [pc, #28]	; (80006b0 <SCHEDULER_handle+0x34>)
 8000692:	701a      	strb	r2, [r3, #0]
		if (Blink_Counter == SCHEDULER_BLINK_HALF_PERIOD_IN_SEC) {
 8000694:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <SCHEDULER_handle+0x34>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2b01      	cmp	r3, #1
 800069a:	d104      	bne.n	80006a6 <SCHEDULER_handle+0x2a>
			Blink_Counter = 0;
 800069c:	4b04      	ldr	r3, [pc, #16]	; (80006b0 <SCHEDULER_handle+0x34>)
 800069e:	2200      	movs	r2, #0
 80006a0:	701a      	strb	r2, [r3, #0]
			LED_toggle();
 80006a2:	f7ff ff4d 	bl	8000540 <LED_toggle>
		}
	}

}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	20000310 	.word	0x20000310
 80006b0:	20000311 	.word	0x20000311

080006b4 <SCHEDULER_stopBlinking>:

void SCHEDULER_stopBlinking(void) {
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
	Blink = FALSE;
 80006b8:	4b03      	ldr	r3, [pc, #12]	; (80006c8 <SCHEDULER_stopBlinking+0x14>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	701a      	strb	r2, [r3, #0]
}
 80006be:	bf00      	nop
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr
 80006c8:	20000310 	.word	0x20000310

080006cc <SCHEDULER_loop>:

void SCHEDULER_loop(void) {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
	while (1) {
		print("Waiting for Watchdog to stop me!\n");
 80006d0:	4801      	ldr	r0, [pc, #4]	; (80006d8 <SCHEDULER_loop+0xc>)
 80006d2:	f000 fa7b 	bl	8000bcc <print>
 80006d6:	e7fb      	b.n	80006d0 <SCHEDULER_loop+0x4>
 80006d8:	08001768 	.word	0x08001768

080006dc <TERMINAL_init>:
static char Wifi_name[TERMINAL_SIZE_OF_COMMAND_BUFFER];
static char Wifi_password[TERMINAL_SIZE_OF_COMMAND_BUFFER];

MODE mode = HANDLING_INPUT;

void TERMINAL_init(void) {
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
	USART2_print("\nWelcome to the Server side!\n");
 80006e0:	4811      	ldr	r0, [pc, #68]	; (8000728 <TERMINAL_init+0x4c>)
 80006e2:	f000 fb07 	bl	8000cf4 <USART2_print>
	USART2_print("\nInitillizing...\n");
 80006e6:	4811      	ldr	r0, [pc, #68]	; (800072c <TERMINAL_init+0x50>)
 80006e8:	f000 fb04 	bl	8000cf4 <USART2_print>
	USART1_print("ATE0\r\n");
 80006ec:	4810      	ldr	r0, [pc, #64]	; (8000730 <TERMINAL_init+0x54>)
 80006ee:	f000 fa2d 	bl	8000b4c <USART1_print>
	USART2_print("Setting CWMODE\n");
 80006f2:	4810      	ldr	r0, [pc, #64]	; (8000734 <TERMINAL_init+0x58>)
 80006f4:	f000 fafe 	bl	8000cf4 <USART2_print>
	USART1_print("AT+CWMODE=1\r\n");
 80006f8:	480f      	ldr	r0, [pc, #60]	; (8000738 <TERMINAL_init+0x5c>)
 80006fa:	f000 fa27 	bl	8000b4c <USART1_print>
	USART2_print("Setting CIPMUX\n");
 80006fe:	480f      	ldr	r0, [pc, #60]	; (800073c <TERMINAL_init+0x60>)
 8000700:	f000 faf8 	bl	8000cf4 <USART2_print>
	USART1_print("AT+CIPMUX=1\r\n");
 8000704:	480e      	ldr	r0, [pc, #56]	; (8000740 <TERMINAL_init+0x64>)
 8000706:	f000 fa21 	bl	8000b4c <USART1_print>
	USART2_print("SERVER\n");
 800070a:	480e      	ldr	r0, [pc, #56]	; (8000744 <TERMINAL_init+0x68>)
 800070c:	f000 faf2 	bl	8000cf4 <USART2_print>
	USART1_print("AT+CIPSERVER=1,80\r\n");
 8000710:	480d      	ldr	r0, [pc, #52]	; (8000748 <TERMINAL_init+0x6c>)
 8000712:	f000 fa1b 	bl	8000b4c <USART1_print>
	USART2_print("SERVER NO TIMEOUT\n");
 8000716:	480d      	ldr	r0, [pc, #52]	; (800074c <TERMINAL_init+0x70>)
 8000718:	f000 faec 	bl	8000cf4 <USART2_print>
	USART1_print("AT+CIPSTO=0\r\n");
 800071c:	480c      	ldr	r0, [pc, #48]	; (8000750 <TERMINAL_init+0x74>)
 800071e:	f000 fa15 	bl	8000b4c <USART1_print>

}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	0800178c 	.word	0x0800178c
 800072c:	080017ac 	.word	0x080017ac
 8000730:	080017c0 	.word	0x080017c0
 8000734:	080017c8 	.word	0x080017c8
 8000738:	080017d8 	.word	0x080017d8
 800073c:	080017e8 	.word	0x080017e8
 8000740:	080017f8 	.word	0x080017f8
 8000744:	08001808 	.word	0x08001808
 8000748:	08001810 	.word	0x08001810
 800074c:	08001824 	.word	0x08001824
 8000750:	08001838 	.word	0x08001838

08000754 <TERMINAL_handleCommand>:

void TERMINAL_handleCommand(void) {
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
	USART2_getCommand(A_COMMAND_RX);
 8000758:	486b      	ldr	r0, [pc, #428]	; (8000908 <TERMINAL_handleCommand+0x1b4>)
 800075a:	f000 fa4f 	bl	8000bfc <USART2_getCommand>
	strcat(A_COMMAND_RX, "\r\n");
 800075e:	486a      	ldr	r0, [pc, #424]	; (8000908 <TERMINAL_handleCommand+0x1b4>)
 8000760:	f7ff fd48 	bl	80001f4 <strlen>
 8000764:	4603      	mov	r3, r0
 8000766:	461a      	mov	r2, r3
 8000768:	4b67      	ldr	r3, [pc, #412]	; (8000908 <TERMINAL_handleCommand+0x1b4>)
 800076a:	4413      	add	r3, r2
 800076c:	4a67      	ldr	r2, [pc, #412]	; (800090c <TERMINAL_handleCommand+0x1b8>)
 800076e:	8811      	ldrh	r1, [r2, #0]
 8000770:	7892      	ldrb	r2, [r2, #2]
 8000772:	8019      	strh	r1, [r3, #0]
 8000774:	709a      	strb	r2, [r3, #2]

	if (strcmp(A_COMMAND_RX, "config\r\n") == 0) {
 8000776:	4966      	ldr	r1, [pc, #408]	; (8000910 <TERMINAL_handleCommand+0x1bc>)
 8000778:	4863      	ldr	r0, [pc, #396]	; (8000908 <TERMINAL_handleCommand+0x1b4>)
 800077a:	f7ff fd31 	bl	80001e0 <strcmp>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d106      	bne.n	8000792 <TERMINAL_handleCommand+0x3e>
		USART2_print("Please Enter Wifi name:\n");
 8000784:	4863      	ldr	r0, [pc, #396]	; (8000914 <TERMINAL_handleCommand+0x1c0>)
 8000786:	f000 fab5 	bl	8000cf4 <USART2_print>
		mode = GETTING_WIFI_NAME;
 800078a:	4b63      	ldr	r3, [pc, #396]	; (8000918 <TERMINAL_handleCommand+0x1c4>)
 800078c:	2201      	movs	r2, #1
 800078e:	701a      	strb	r2, [r3, #0]
		return;
 8000790:	e0b9      	b.n	8000906 <TERMINAL_handleCommand+0x1b2>
	}

	if (mode == HANDLING_INPUT) {
 8000792:	4b61      	ldr	r3, [pc, #388]	; (8000918 <TERMINAL_handleCommand+0x1c4>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d122      	bne.n	80007e0 <TERMINAL_handleCommand+0x8c>
		if (strcmp(A_COMMAND_RX, "watchdog\r\n") == 0) {
 800079a:	4960      	ldr	r1, [pc, #384]	; (800091c <TERMINAL_handleCommand+0x1c8>)
 800079c:	485a      	ldr	r0, [pc, #360]	; (8000908 <TERMINAL_handleCommand+0x1b4>)
 800079e:	f7ff fd1f 	bl	80001e0 <strcmp>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d102      	bne.n	80007ae <TERMINAL_handleCommand+0x5a>
			SCHEDULER_loop();
 80007a8:	f7ff ff90 	bl	80006cc <SCHEDULER_loop>
 80007ac:	e018      	b.n	80007e0 <TERMINAL_handleCommand+0x8c>
		} else if (strcmp(A_COMMAND_RX, "show\r\n") == 0) {
 80007ae:	495c      	ldr	r1, [pc, #368]	; (8000920 <TERMINAL_handleCommand+0x1cc>)
 80007b0:	4855      	ldr	r0, [pc, #340]	; (8000908 <TERMINAL_handleCommand+0x1b4>)
 80007b2:	f7ff fd15 	bl	80001e0 <strcmp>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d103      	bne.n	80007c4 <TERMINAL_handleCommand+0x70>
			USART1_print("AT+CIFSR\r\n");
 80007bc:	4859      	ldr	r0, [pc, #356]	; (8000924 <TERMINAL_handleCommand+0x1d0>)
 80007be:	f000 f9c5 	bl	8000b4c <USART1_print>
 80007c2:	e00d      	b.n	80007e0 <TERMINAL_handleCommand+0x8c>
		} else if (strcmp(A_COMMAND_RX, "disconnect\r\n") == 0) {
 80007c4:	4958      	ldr	r1, [pc, #352]	; (8000928 <TERMINAL_handleCommand+0x1d4>)
 80007c6:	4850      	ldr	r0, [pc, #320]	; (8000908 <TERMINAL_handleCommand+0x1b4>)
 80007c8:	f7ff fd0a 	bl	80001e0 <strcmp>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d103      	bne.n	80007da <TERMINAL_handleCommand+0x86>
			USART1_print("AT+CWQAP\r\n");
 80007d2:	4856      	ldr	r0, [pc, #344]	; (800092c <TERMINAL_handleCommand+0x1d8>)
 80007d4:	f000 f9ba 	bl	8000b4c <USART1_print>
 80007d8:	e002      	b.n	80007e0 <TERMINAL_handleCommand+0x8c>
		} else {
			USART1_print(A_COMMAND_RX);
 80007da:	484b      	ldr	r0, [pc, #300]	; (8000908 <TERMINAL_handleCommand+0x1b4>)
 80007dc:	f000 f9b6 	bl	8000b4c <USART1_print>
		}
	}
	if (mode == GETTING_WIFI_NAME) {
 80007e0:	4b4d      	ldr	r3, [pc, #308]	; (8000918 <TERMINAL_handleCommand+0x1c4>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	2b01      	cmp	r3, #1
 80007e6:	d112      	bne.n	800080e <TERMINAL_handleCommand+0xba>
		A_COMMAND_RX[strlen(A_COMMAND_RX) - 2] = '\0';
 80007e8:	4847      	ldr	r0, [pc, #284]	; (8000908 <TERMINAL_handleCommand+0x1b4>)
 80007ea:	f7ff fd03 	bl	80001f4 <strlen>
 80007ee:	4603      	mov	r3, r0
 80007f0:	3b02      	subs	r3, #2
 80007f2:	4a45      	ldr	r2, [pc, #276]	; (8000908 <TERMINAL_handleCommand+0x1b4>)
 80007f4:	2100      	movs	r1, #0
 80007f6:	54d1      	strb	r1, [r2, r3]
		(void) strcpy(Wifi_name, A_COMMAND_RX);
 80007f8:	4943      	ldr	r1, [pc, #268]	; (8000908 <TERMINAL_handleCommand+0x1b4>)
 80007fa:	484d      	ldr	r0, [pc, #308]	; (8000930 <TERMINAL_handleCommand+0x1dc>)
 80007fc:	f000 fb27 	bl	8000e4e <strcpy>
		USART2_print("Please Enter Wifi password:\n");
 8000800:	484c      	ldr	r0, [pc, #304]	; (8000934 <TERMINAL_handleCommand+0x1e0>)
 8000802:	f000 fa77 	bl	8000cf4 <USART2_print>
		mode = GETTING_WIFI_PASSWORD;
 8000806:	4b44      	ldr	r3, [pc, #272]	; (8000918 <TERMINAL_handleCommand+0x1c4>)
 8000808:	2202      	movs	r2, #2
 800080a:	701a      	strb	r2, [r3, #0]
		return;
 800080c:	e07b      	b.n	8000906 <TERMINAL_handleCommand+0x1b2>
	}
	if (mode == GETTING_WIFI_PASSWORD) {
 800080e:	4b42      	ldr	r3, [pc, #264]	; (8000918 <TERMINAL_handleCommand+0x1c4>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	2b02      	cmp	r3, #2
 8000814:	d177      	bne.n	8000906 <TERMINAL_handleCommand+0x1b2>
		A_COMMAND_RX[strlen(A_COMMAND_RX) - 2] = '\0';
 8000816:	483c      	ldr	r0, [pc, #240]	; (8000908 <TERMINAL_handleCommand+0x1b4>)
 8000818:	f7ff fcec 	bl	80001f4 <strlen>
 800081c:	4603      	mov	r3, r0
 800081e:	3b02      	subs	r3, #2
 8000820:	4a39      	ldr	r2, [pc, #228]	; (8000908 <TERMINAL_handleCommand+0x1b4>)
 8000822:	2100      	movs	r1, #0
 8000824:	54d1      	strb	r1, [r2, r3]
		(void) strcpy(Wifi_password, A_COMMAND_RX);
 8000826:	4938      	ldr	r1, [pc, #224]	; (8000908 <TERMINAL_handleCommand+0x1b4>)
 8000828:	4843      	ldr	r0, [pc, #268]	; (8000938 <TERMINAL_handleCommand+0x1e4>)
 800082a:	f000 fb10 	bl	8000e4e <strcpy>
		strcat(A_COMMAND_TX, "AT+CWJAP=");
 800082e:	4843      	ldr	r0, [pc, #268]	; (800093c <TERMINAL_handleCommand+0x1e8>)
 8000830:	f7ff fce0 	bl	80001f4 <strlen>
 8000834:	4603      	mov	r3, r0
 8000836:	461a      	mov	r2, r3
 8000838:	4b40      	ldr	r3, [pc, #256]	; (800093c <TERMINAL_handleCommand+0x1e8>)
 800083a:	4413      	add	r3, r2
 800083c:	4940      	ldr	r1, [pc, #256]	; (8000940 <TERMINAL_handleCommand+0x1ec>)
 800083e:	461a      	mov	r2, r3
 8000840:	460b      	mov	r3, r1
 8000842:	cb03      	ldmia	r3!, {r0, r1}
 8000844:	6010      	str	r0, [r2, #0]
 8000846:	6051      	str	r1, [r2, #4]
 8000848:	881b      	ldrh	r3, [r3, #0]
 800084a:	8113      	strh	r3, [r2, #8]
		strcat(A_COMMAND_TX, "\"");
 800084c:	483b      	ldr	r0, [pc, #236]	; (800093c <TERMINAL_handleCommand+0x1e8>)
 800084e:	f7ff fcd1 	bl	80001f4 <strlen>
 8000852:	4603      	mov	r3, r0
 8000854:	461a      	mov	r2, r3
 8000856:	4b39      	ldr	r3, [pc, #228]	; (800093c <TERMINAL_handleCommand+0x1e8>)
 8000858:	4413      	add	r3, r2
 800085a:	493a      	ldr	r1, [pc, #232]	; (8000944 <TERMINAL_handleCommand+0x1f0>)
 800085c:	461a      	mov	r2, r3
 800085e:	460b      	mov	r3, r1
 8000860:	881b      	ldrh	r3, [r3, #0]
 8000862:	8013      	strh	r3, [r2, #0]
		strcat(A_COMMAND_TX, Wifi_name);
 8000864:	4932      	ldr	r1, [pc, #200]	; (8000930 <TERMINAL_handleCommand+0x1dc>)
 8000866:	4835      	ldr	r0, [pc, #212]	; (800093c <TERMINAL_handleCommand+0x1e8>)
 8000868:	f000 fae2 	bl	8000e30 <strcat>
		strcat(A_COMMAND_TX, "\"");
 800086c:	4833      	ldr	r0, [pc, #204]	; (800093c <TERMINAL_handleCommand+0x1e8>)
 800086e:	f7ff fcc1 	bl	80001f4 <strlen>
 8000872:	4603      	mov	r3, r0
 8000874:	461a      	mov	r2, r3
 8000876:	4b31      	ldr	r3, [pc, #196]	; (800093c <TERMINAL_handleCommand+0x1e8>)
 8000878:	4413      	add	r3, r2
 800087a:	4932      	ldr	r1, [pc, #200]	; (8000944 <TERMINAL_handleCommand+0x1f0>)
 800087c:	461a      	mov	r2, r3
 800087e:	460b      	mov	r3, r1
 8000880:	881b      	ldrh	r3, [r3, #0]
 8000882:	8013      	strh	r3, [r2, #0]
		strcat(A_COMMAND_TX, ",");
 8000884:	482d      	ldr	r0, [pc, #180]	; (800093c <TERMINAL_handleCommand+0x1e8>)
 8000886:	f7ff fcb5 	bl	80001f4 <strlen>
 800088a:	4603      	mov	r3, r0
 800088c:	461a      	mov	r2, r3
 800088e:	4b2b      	ldr	r3, [pc, #172]	; (800093c <TERMINAL_handleCommand+0x1e8>)
 8000890:	4413      	add	r3, r2
 8000892:	492d      	ldr	r1, [pc, #180]	; (8000948 <TERMINAL_handleCommand+0x1f4>)
 8000894:	461a      	mov	r2, r3
 8000896:	460b      	mov	r3, r1
 8000898:	881b      	ldrh	r3, [r3, #0]
 800089a:	8013      	strh	r3, [r2, #0]
		strcat(A_COMMAND_TX, "\"");
 800089c:	4827      	ldr	r0, [pc, #156]	; (800093c <TERMINAL_handleCommand+0x1e8>)
 800089e:	f7ff fca9 	bl	80001f4 <strlen>
 80008a2:	4603      	mov	r3, r0
 80008a4:	461a      	mov	r2, r3
 80008a6:	4b25      	ldr	r3, [pc, #148]	; (800093c <TERMINAL_handleCommand+0x1e8>)
 80008a8:	4413      	add	r3, r2
 80008aa:	4926      	ldr	r1, [pc, #152]	; (8000944 <TERMINAL_handleCommand+0x1f0>)
 80008ac:	461a      	mov	r2, r3
 80008ae:	460b      	mov	r3, r1
 80008b0:	881b      	ldrh	r3, [r3, #0]
 80008b2:	8013      	strh	r3, [r2, #0]
		strcat(A_COMMAND_TX, Wifi_password);
 80008b4:	4920      	ldr	r1, [pc, #128]	; (8000938 <TERMINAL_handleCommand+0x1e4>)
 80008b6:	4821      	ldr	r0, [pc, #132]	; (800093c <TERMINAL_handleCommand+0x1e8>)
 80008b8:	f000 faba 	bl	8000e30 <strcat>
		strcat(A_COMMAND_TX, "\"");
 80008bc:	481f      	ldr	r0, [pc, #124]	; (800093c <TERMINAL_handleCommand+0x1e8>)
 80008be:	f7ff fc99 	bl	80001f4 <strlen>
 80008c2:	4603      	mov	r3, r0
 80008c4:	461a      	mov	r2, r3
 80008c6:	4b1d      	ldr	r3, [pc, #116]	; (800093c <TERMINAL_handleCommand+0x1e8>)
 80008c8:	4413      	add	r3, r2
 80008ca:	491e      	ldr	r1, [pc, #120]	; (8000944 <TERMINAL_handleCommand+0x1f0>)
 80008cc:	461a      	mov	r2, r3
 80008ce:	460b      	mov	r3, r1
 80008d0:	881b      	ldrh	r3, [r3, #0]
 80008d2:	8013      	strh	r3, [r2, #0]
		strcat(A_COMMAND_TX, "\r\n");
 80008d4:	4819      	ldr	r0, [pc, #100]	; (800093c <TERMINAL_handleCommand+0x1e8>)
 80008d6:	f7ff fc8d 	bl	80001f4 <strlen>
 80008da:	4603      	mov	r3, r0
 80008dc:	461a      	mov	r2, r3
 80008de:	4b17      	ldr	r3, [pc, #92]	; (800093c <TERMINAL_handleCommand+0x1e8>)
 80008e0:	4413      	add	r3, r2
 80008e2:	4a0a      	ldr	r2, [pc, #40]	; (800090c <TERMINAL_handleCommand+0x1b8>)
 80008e4:	8811      	ldrh	r1, [r2, #0]
 80008e6:	7892      	ldrb	r2, [r2, #2]
 80008e8:	8019      	strh	r1, [r3, #0]
 80008ea:	709a      	strb	r2, [r3, #2]
		USART2_print("\nProcessing data...please wait!\n\n");
 80008ec:	4817      	ldr	r0, [pc, #92]	; (800094c <TERMINAL_handleCommand+0x1f8>)
 80008ee:	f000 fa01 	bl	8000cf4 <USART2_print>
		USART1_print(A_COMMAND_TX);
 80008f2:	4812      	ldr	r0, [pc, #72]	; (800093c <TERMINAL_handleCommand+0x1e8>)
 80008f4:	f000 f92a 	bl	8000b4c <USART1_print>
		A_COMMAND_TX[0] = '\0';
 80008f8:	4b10      	ldr	r3, [pc, #64]	; (800093c <TERMINAL_handleCommand+0x1e8>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	701a      	strb	r2, [r3, #0]
		mode = HANDLING_INPUT;
 80008fe:	4b06      	ldr	r3, [pc, #24]	; (8000918 <TERMINAL_handleCommand+0x1c4>)
 8000900:	2200      	movs	r2, #0
 8000902:	701a      	strb	r2, [r3, #0]
		return;
 8000904:	bf00      	nop
	}
}
 8000906:	bd80      	pop	{r7, pc}
 8000908:	20000314 	.word	0x20000314
 800090c:	08001848 	.word	0x08001848
 8000910:	0800184c 	.word	0x0800184c
 8000914:	08001858 	.word	0x08001858
 8000918:	20000514 	.word	0x20000514
 800091c:	08001874 	.word	0x08001874
 8000920:	08001880 	.word	0x08001880
 8000924:	08001888 	.word	0x08001888
 8000928:	08001894 	.word	0x08001894
 800092c:	080018a4 	.word	0x080018a4
 8000930:	20000414 	.word	0x20000414
 8000934:	080018b0 	.word	0x080018b0
 8000938:	20000494 	.word	0x20000494
 800093c:	20000394 	.word	0x20000394
 8000940:	080018d0 	.word	0x080018d0
 8000944:	080018dc 	.word	0x080018dc
 8000948:	080018e0 	.word	0x080018e0
 800094c:	080018e4 	.word	0x080018e4

08000950 <__NVIC_EnableIRQ>:
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800095a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800095e:	2b00      	cmp	r3, #0
 8000960:	db0b      	blt.n	800097a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000962:	79fb      	ldrb	r3, [r7, #7]
 8000964:	f003 021f 	and.w	r2, r3, #31
 8000968:	4907      	ldr	r1, [pc, #28]	; (8000988 <__NVIC_EnableIRQ+0x38>)
 800096a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800096e:	095b      	lsrs	r3, r3, #5
 8000970:	2001      	movs	r0, #1
 8000972:	fa00 f202 	lsl.w	r2, r0, r2
 8000976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800097a:	bf00      	nop
 800097c:	370c      	adds	r7, #12
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	e000e100 	.word	0xe000e100

0800098c <TIM2_IRQHandler>:
#include "timer2.h"
#include "types.h"

static BOOL Expired = FALSE;

void TIM2_IRQHandler(void) {
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
	// Clean the interrupt flag.
	TIM2->SR &= ~0x00000001;
 8000990:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000994:	691b      	ldr	r3, [r3, #16]
 8000996:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800099a:	f023 0301 	bic.w	r3, r3, #1
 800099e:	6113      	str	r3, [r2, #16]
	// Raise the software flag.
	Expired = TRUE;
 80009a0:	4b03      	ldr	r3, [pc, #12]	; (80009b0 <TIM2_IRQHandler+0x24>)
 80009a2:	2201      	movs	r2, #1
 80009a4:	701a      	strb	r2, [r3, #0]
}
 80009a6:	bf00      	nop
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr
 80009b0:	20000515 	.word	0x20000515

080009b4 <TIMER2_expired>:

BOOL TIMER2_expired(void) {
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
	if (Expired) {
 80009b8:	4b07      	ldr	r3, [pc, #28]	; (80009d8 <TIMER2_expired+0x24>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d004      	beq.n	80009ca <TIMER2_expired+0x16>
		Expired = FALSE;
 80009c0:	4b05      	ldr	r3, [pc, #20]	; (80009d8 <TIMER2_expired+0x24>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	701a      	strb	r2, [r3, #0]
		return TRUE;
 80009c6:	2301      	movs	r3, #1
 80009c8:	e000      	b.n	80009cc <TIMER2_expired+0x18>
	} else {
		return FALSE;
 80009ca:	2300      	movs	r3, #0
	}
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	20000515 	.word	0x20000515

080009dc <TIMER2_init>:

void TIMER2_init(void) {
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
	// Enable Timer 2 clock (p. 152 in the datasheet).
	RCC->APB1ENR |= 0x00000001;
 80009e0:	4b0b      	ldr	r3, [pc, #44]	; (8000a10 <TIMER2_init+0x34>)
 80009e2:	69db      	ldr	r3, [r3, #28]
 80009e4:	4a0a      	ldr	r2, [pc, #40]	; (8000a10 <TIMER2_init+0x34>)
 80009e6:	f043 0301 	orr.w	r3, r3, #1
 80009ea:	61d3      	str	r3, [r2, #28]
	// Set the frequency of Timer 2.
	// Assuming a clock source of 8 MHz (see pp. 127 and 133 in the datasheet),
	// this will set the timer to tick at a rate of 1 Hz.
	TIM2->ARR = 8000000;
 80009ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009f0:	4a08      	ldr	r2, [pc, #32]	; (8000a14 <TIMER2_init+0x38>)
 80009f2:	62da      	str	r2, [r3, #44]	; 0x2c
	// Enable the Timer 2 interrupt.
	TIM2->DIER = 0x00000001;
 80009f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009f8:	2201      	movs	r2, #1
 80009fa:	60da      	str	r2, [r3, #12]
	NVIC_EnableIRQ(TIM2_IRQn);
 80009fc:	201c      	movs	r0, #28
 80009fe:	f7ff ffa7 	bl	8000950 <__NVIC_EnableIRQ>
	// Enable Timer 2.
	TIM2->CR1 = 0x00000001;
 8000a02:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a06:	2201      	movs	r2, #1
 8000a08:	601a      	str	r2, [r3, #0]
}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40021000 	.word	0x40021000
 8000a14:	007a1200 	.word	0x007a1200

08000a18 <__NVIC_EnableIRQ>:
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	db0b      	blt.n	8000a42 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	f003 021f 	and.w	r2, r3, #31
 8000a30:	4907      	ldr	r1, [pc, #28]	; (8000a50 <__NVIC_EnableIRQ+0x38>)
 8000a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a36:	095b      	lsrs	r3, r3, #5
 8000a38:	2001      	movs	r0, #1
 8000a3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000a42:	bf00      	nop
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	e000e100 	.word	0xe000e100

08000a54 <USART1_getCommand>:
	}
}

//A function that copy the USART1 response into an array.
//will be used to send be the USART1 response to main.
void USART1_getCommand(char *p_command) {
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
	//While the CYCLIC_BUFFER is not empty:
	//Start reading the data and store it into array
	while (!CB_isEmpty(&USART1_response)) {
 8000a5c:	e009      	b.n	8000a72 <USART1_getCommand+0x1e>
		*p_command = (char) CB_read(&USART1_response);
 8000a5e:	480e      	ldr	r0, [pc, #56]	; (8000a98 <USART1_getCommand+0x44>)
 8000a60:	f7ff fc3e 	bl	80002e0 <CB_read>
 8000a64:	4603      	mov	r3, r0
 8000a66:	b2da      	uxtb	r2, r3
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	701a      	strb	r2, [r3, #0]
		p_command++;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	3301      	adds	r3, #1
 8000a70:	607b      	str	r3, [r7, #4]
	while (!CB_isEmpty(&USART1_response)) {
 8000a72:	4809      	ldr	r0, [pc, #36]	; (8000a98 <USART1_getCommand+0x44>)
 8000a74:	f7ff fc7a 	bl	800036c <CB_isEmpty>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d0ef      	beq.n	8000a5e <USART1_getCommand+0xa>
	}
	//If the CYCLIC_BUFFER is empty,
	//close the array using '\0'
	if (CB_isEmpty(&USART1_response) == TRUE) {
 8000a7e:	4806      	ldr	r0, [pc, #24]	; (8000a98 <USART1_getCommand+0x44>)
 8000a80:	f7ff fc74 	bl	800036c <CB_isEmpty>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b01      	cmp	r3, #1
 8000a88:	d102      	bne.n	8000a90 <USART1_getCommand+0x3c>
		*p_command = '\0';
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	701a      	strb	r2, [r3, #0]
	}

}
 8000a90:	bf00      	nop
 8000a92:	3708      	adds	r7, #8
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	20000518 	.word	0x20000518

08000a9c <USART1_init>:
//A function to Initializes USART1 and its registers.

void USART1_init(void) {
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
	// Enable GPIOA clock (p. 148 in the reference manual).
	RCC->AHBENR |= 0x00020000;
 8000aa0:	4b14      	ldr	r3, [pc, #80]	; (8000af4 <USART1_init+0x58>)
 8000aa2:	695b      	ldr	r3, [r3, #20]
 8000aa4:	4a13      	ldr	r2, [pc, #76]	; (8000af4 <USART1_init+0x58>)
 8000aa6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aaa:	6153      	str	r3, [r2, #20]
	// Enable USART1 clock(p. 151 in the reference manual).
	RCC->APB2ENR |= 0x00004000; //Enable bit 14.
 8000aac:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <USART1_init+0x58>)
 8000aae:	699b      	ldr	r3, [r3, #24]
 8000ab0:	4a10      	ldr	r2, [pc, #64]	; (8000af4 <USART1_init+0x58>)
 8000ab2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ab6:	6193      	str	r3, [r2, #24]
	//  0000 0000 0000 0000 0100 0000 0000 0000
	// Configure GPIOA pins 9 and 10 as alternate function 7, which is USART1.
	//(p. 237 in the reference manual).
	//Enabling MODER10 and MODER9 as alternate function.
	GPIOA->MODER |= 0x00280000;	//0000 0000 0010 1000 0000 0000 0000 0000
 8000ab8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000ac2:	f443 1320 	orr.w	r3, r3, #2621440	; 0x280000
 8000ac6:	6013      	str	r3, [r2, #0]
	//(Need to enable AF7 p.53 in the data-sheet)
	// AFR[0] is the same as AFRL in the reference manual (p. 241),(pins from 0 to 7).
	// AFR[1] is the same as AFRH in the reference manual (p. 242),(pins from 8 to 15).
	GPIOA->AFR[1] |= 0x00000770;	    //Pin 9,Pin 10
 8000ac8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ace:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000ad2:	f443 63ee 	orr.w	r3, r3, #1904	; 0x770
 8000ad6:	6253      	str	r3, [r2, #36]	; 0x24
	USART1->BRR = 69.44444444444444; // 8 MHz / 115200 baud rate-->8*10^6/115200.
 8000ad8:	4b07      	ldr	r3, [pc, #28]	; (8000af8 <USART1_init+0x5c>)
 8000ada:	2245      	movs	r2, #69	; 0x45
 8000adc:	60da      	str	r2, [r3, #12]
	// Enable USART1 and its TX,RX functionality.
	USART1->CR1 = 0x0000002D;
 8000ade:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <USART1_init+0x5c>)
 8000ae0:	222d      	movs	r2, #45	; 0x2d
 8000ae2:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(USART1_IRQn);
 8000ae4:	2025      	movs	r0, #37	; 0x25
 8000ae6:	f7ff ff97 	bl	8000a18 <__NVIC_EnableIRQ>
	//Initializes an empty CYCLIC_BUFFER
	CB_init(&USART1_response);
 8000aea:	4804      	ldr	r0, [pc, #16]	; (8000afc <USART1_init+0x60>)
 8000aec:	f7ff fbe0 	bl	80002b0 <CB_init>
}
 8000af0:	bf00      	nop
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40021000 	.word	0x40021000
 8000af8:	40013800 	.word	0x40013800
 8000afc:	20000518 	.word	0x20000518

08000b00 <USART1_EXTI25_IRQHandler>:

//A handler to get the response from the ESP8266 modem.
void USART1_EXTI25_IRQHandler(void) {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
	char rx_byte;
	// Read the received byte into the buffer.
	// This also clears the interrupt request flag.
	rx_byte = USART1->RDR;
 8000b06:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <USART1_EXTI25_IRQHandler+0x40>)
 8000b08:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000b0a:	b29b      	uxth	r3, r3
 8000b0c:	71fb      	strb	r3, [r7, #7]
	// If the user entered '\n', a whole command has been received.
	if (USART1->RDR == '\n') {
 8000b0e:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <USART1_EXTI25_IRQHandler+0x40>)
 8000b10:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000b12:	b29b      	uxth	r3, r3
 8000b14:	2b0a      	cmp	r3, #10
 8000b16:	d10b      	bne.n	8000b30 <USART1_EXTI25_IRQHandler+0x30>
		Command_Received = TRUE;
 8000b18:	4b0a      	ldr	r3, [pc, #40]	; (8000b44 <USART1_EXTI25_IRQHandler+0x44>)
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	701a      	strb	r2, [r3, #0]
		EVENT_QUEUE_write(EVENT_USART1_MESSAGE);
 8000b1e:	2002      	movs	r0, #2
 8000b20:	f7ff fcb2 	bl	8000488 <EVENT_QUEUE_write>
		CB_write((uint32_t) rx_byte, &USART1_response);
 8000b24:	79fb      	ldrb	r3, [r7, #7]
 8000b26:	4908      	ldr	r1, [pc, #32]	; (8000b48 <USART1_EXTI25_IRQHandler+0x48>)
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f7ff fbfc 	bl	8000326 <CB_write>
		return;
 8000b2e:	e004      	b.n	8000b3a <USART1_EXTI25_IRQHandler+0x3a>
	}
	CB_write((uint32_t) rx_byte, &USART1_response);
 8000b30:	79fb      	ldrb	r3, [r7, #7]
 8000b32:	4905      	ldr	r1, [pc, #20]	; (8000b48 <USART1_EXTI25_IRQHandler+0x48>)
 8000b34:	4618      	mov	r0, r3
 8000b36:	f7ff fbf6 	bl	8000326 <CB_write>
}
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40013800 	.word	0x40013800
 8000b44:	20000516 	.word	0x20000516
 8000b48:	20000518 	.word	0x20000518

08000b4c <USART1_print>:

//A function to write commands the ESP8266 modem using USART1
void USART1_print(const char *p_data) {
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
	while (*p_data != '\0') {
 8000b54:	e00e      	b.n	8000b74 <USART1_print+0x28>
		USART1->TDR = *p_data;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	781a      	ldrb	r2, [r3, #0]
 8000b5a:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <USART1_print+0x40>)
 8000b5c:	b292      	uxth	r2, r2
 8000b5e:	851a      	strh	r2, [r3, #40]	; 0x28
		p_data++;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	3301      	adds	r3, #1
 8000b64:	607b      	str	r3, [r7, #4]
		while (!(USART1->ISR & 0x00000080))
 8000b66:	bf00      	nop
 8000b68:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <USART1_print+0x40>)
 8000b6a:	69db      	ldr	r3, [r3, #28]
 8000b6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d0f9      	beq.n	8000b68 <USART1_print+0x1c>
	while (*p_data != '\0') {
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d1ec      	bne.n	8000b56 <USART1_print+0xa>
			// The TXE bit is bit 7 in the register ISR.
			;
	}
}
 8000b7c:	bf00      	nop
 8000b7e:	bf00      	nop
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	40013800 	.word	0x40013800

08000b90 <__NVIC_EnableIRQ>:
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	db0b      	blt.n	8000bba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ba2:	79fb      	ldrb	r3, [r7, #7]
 8000ba4:	f003 021f 	and.w	r2, r3, #31
 8000ba8:	4907      	ldr	r1, [pc, #28]	; (8000bc8 <__NVIC_EnableIRQ+0x38>)
 8000baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bae:	095b      	lsrs	r3, r3, #5
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	fa00 f202 	lsl.w	r2, r0, r2
 8000bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000bba:	bf00      	nop
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	e000e100 	.word	0xe000e100

08000bcc <print>:
static BOOL Command_Received;
//A CYCLIC_BUFFER which will store the USART2 response
static CYCLIC_BUFFER USART2_response;

//A printf-like function to print variables and string
void print(char *p_format, ...) {
 8000bcc:	b40f      	push	{r0, r1, r2, r3}
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b082      	sub	sp, #8
 8000bd2:	af00      	add	r7, sp, #0
	va_list p_variables;
	va_start(p_variables, p_format);
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	607b      	str	r3, [r7, #4]
	(void) vsprintf(A_Tx_Buffer, p_format, p_variables);
 8000bda:	687a      	ldr	r2, [r7, #4]
 8000bdc:	6939      	ldr	r1, [r7, #16]
 8000bde:	4806      	ldr	r0, [pc, #24]	; (8000bf8 <print+0x2c>)
 8000be0:	f000 f96a 	bl	8000eb8 <vsiprintf>
	USART2_print(A_Tx_Buffer);
 8000be4:	4804      	ldr	r0, [pc, #16]	; (8000bf8 <print+0x2c>)
 8000be6:	f000 f885 	bl	8000cf4 <USART2_print>
}
 8000bea:	bf00      	nop
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr
 8000bf8:	20000724 	.word	0x20000724

08000bfc <USART2_getCommand>:
	}
}

//A function that copy the USART2 response into an array.
//will be used to send be the USART2 response to main.
void USART2_getCommand(char *p_command) {
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
	//While the CYCLIC_BUFFER is not empty:
	//Start reading the data and store it into array
	while (!CB_isEmpty(&USART2_response)) {
 8000c04:	e009      	b.n	8000c1a <USART2_getCommand+0x1e>
		*p_command = (char) CB_read(&USART2_response);
 8000c06:	480e      	ldr	r0, [pc, #56]	; (8000c40 <USART2_getCommand+0x44>)
 8000c08:	f7ff fb6a 	bl	80002e0 <CB_read>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	b2da      	uxtb	r2, r3
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	701a      	strb	r2, [r3, #0]
		p_command++;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	3301      	adds	r3, #1
 8000c18:	607b      	str	r3, [r7, #4]
	while (!CB_isEmpty(&USART2_response)) {
 8000c1a:	4809      	ldr	r0, [pc, #36]	; (8000c40 <USART2_getCommand+0x44>)
 8000c1c:	f7ff fba6 	bl	800036c <CB_isEmpty>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d0ef      	beq.n	8000c06 <USART2_getCommand+0xa>
	}
	//If the CYCLIC_BUFFER is empty,
	//close the array using '\0'
	if (CB_isEmpty(&USART2_response) == TRUE) {
 8000c26:	4806      	ldr	r0, [pc, #24]	; (8000c40 <USART2_getCommand+0x44>)
 8000c28:	f7ff fba0 	bl	800036c <CB_isEmpty>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b01      	cmp	r3, #1
 8000c30:	d102      	bne.n	8000c38 <USART2_getCommand+0x3c>
		*p_command = '\0';
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2200      	movs	r2, #0
 8000c36:	701a      	strb	r2, [r3, #0]
	}

}
 8000c38:	bf00      	nop
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20000738 	.word	0x20000738

08000c44 <USART2_init>:

//A function to Initializes USART2 and its registers.

void USART2_init(void) {
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
	// Enable GPIOA clock (p. 148 in the reference manual).
	RCC->AHBENR |= 0x00020000;
 8000c48:	4b15      	ldr	r3, [pc, #84]	; (8000ca0 <USART2_init+0x5c>)
 8000c4a:	695b      	ldr	r3, [r3, #20]
 8000c4c:	4a14      	ldr	r2, [pc, #80]	; (8000ca0 <USART2_init+0x5c>)
 8000c4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c52:	6153      	str	r3, [r2, #20]
	// Enable USART2 clock.
	RCC->APB1ENR |= 0x00020000;
 8000c54:	4b12      	ldr	r3, [pc, #72]	; (8000ca0 <USART2_init+0x5c>)
 8000c56:	69db      	ldr	r3, [r3, #28]
 8000c58:	4a11      	ldr	r2, [pc, #68]	; (8000ca0 <USART2_init+0x5c>)
 8000c5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c5e:	61d3      	str	r3, [r2, #28]
	// Configure GPIOA pins 2 and 3 as alternate function 7, which is USART2.
	GPIOA->MODER |= 0x000000A0;
 8000c60:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000c6a:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000c6e:	6013      	str	r3, [r2, #0]
	// AFR[0] is the same as AFRL in the reference manual (p. 241),
	// and AFR[1] is the same as AFRH in the reference manual (p. 242).
	GPIOA->AFR[0] |= 0x00007700;
 8000c70:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c74:	6a1b      	ldr	r3, [r3, #32]
 8000c76:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000c7a:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8000c7e:	6213      	str	r3, [r2, #32]
	USART2->BRR = 833;  // 8 MHz / 9600 baud rate.
 8000c80:	4b08      	ldr	r3, [pc, #32]	; (8000ca4 <USART2_init+0x60>)
 8000c82:	f240 3241 	movw	r2, #833	; 0x341
 8000c86:	60da      	str	r2, [r3, #12]
	// Enable USART2 and its RX and TX functionality.
	// Also enable the RX interrupt.
	USART2->CR1 = 0x0000002D;
 8000c88:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <USART2_init+0x60>)
 8000c8a:	222d      	movs	r2, #45	; 0x2d
 8000c8c:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(USART2_IRQn);
 8000c8e:	2026      	movs	r0, #38	; 0x26
 8000c90:	f7ff ff7e 	bl	8000b90 <__NVIC_EnableIRQ>
	//Initializes an empty CYCLIC_BUFFER

	CB_init(&USART2_response);
 8000c94:	4804      	ldr	r0, [pc, #16]	; (8000ca8 <USART2_init+0x64>)
 8000c96:	f7ff fb0b 	bl	80002b0 <CB_init>
}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40021000 	.word	0x40021000
 8000ca4:	40004400 	.word	0x40004400
 8000ca8:	20000738 	.word	0x20000738

08000cac <USART2_EXTI26_IRQHandler>:

//A handler to get the response from USART2 RX modem.
void USART2_EXTI26_IRQHandler(void) {
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
	char rx_byte;
	// Read the received byte into the buffer.
	// This also clears the interrupt request flag.
	rx_byte = USART2->RDR;
 8000cb2:	4b0d      	ldr	r3, [pc, #52]	; (8000ce8 <USART2_EXTI26_IRQHandler+0x3c>)
 8000cb4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000cb6:	b29b      	uxth	r3, r3
 8000cb8:	71fb      	strb	r3, [r7, #7]
	// If the user entered '\n', a whole command has been received.
	if (rx_byte == '\n') {
 8000cba:	79fb      	ldrb	r3, [r7, #7]
 8000cbc:	2b0a      	cmp	r3, #10
 8000cbe:	d10a      	bne.n	8000cd6 <USART2_EXTI26_IRQHandler+0x2a>
		Command_Received = TRUE;
 8000cc0:	4b0a      	ldr	r3, [pc, #40]	; (8000cec <USART2_EXTI26_IRQHandler+0x40>)
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	701a      	strb	r2, [r3, #0]
		EVENT_QUEUE_write(EVENT_USART2_MESSAGE);
 8000cc6:	2000      	movs	r0, #0
 8000cc8:	f7ff fbde 	bl	8000488 <EVENT_QUEUE_write>
		CB_write('\0', &USART2_response);
 8000ccc:	4908      	ldr	r1, [pc, #32]	; (8000cf0 <USART2_EXTI26_IRQHandler+0x44>)
 8000cce:	2000      	movs	r0, #0
 8000cd0:	f7ff fb29 	bl	8000326 <CB_write>
		return;
 8000cd4:	e004      	b.n	8000ce0 <USART2_EXTI26_IRQHandler+0x34>
	}
	CB_write(rx_byte, &USART2_response);
 8000cd6:	79fb      	ldrb	r3, [r7, #7]
 8000cd8:	4905      	ldr	r1, [pc, #20]	; (8000cf0 <USART2_EXTI26_IRQHandler+0x44>)
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff fb23 	bl	8000326 <CB_write>
}
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40004400 	.word	0x40004400
 8000cec:	20000734 	.word	0x20000734
 8000cf0:	20000738 	.word	0x20000738

08000cf4 <USART2_print>:

void USART2_print(const char *p_data) {
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
	while (*p_data != '\0') {
 8000cfc:	e00e      	b.n	8000d1c <USART2_print+0x28>
		USART2->TDR = *p_data;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	781a      	ldrb	r2, [r3, #0]
 8000d02:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <USART2_print+0x40>)
 8000d04:	b292      	uxth	r2, r2
 8000d06:	851a      	strh	r2, [r3, #40]	; 0x28
		p_data++;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	607b      	str	r3, [r7, #4]
		while (!(USART2->ISR & 0x00000080))
 8000d0e:	bf00      	nop
 8000d10:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <USART2_print+0x40>)
 8000d12:	69db      	ldr	r3, [r3, #28]
 8000d14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d0f9      	beq.n	8000d10 <USART2_print+0x1c>
	while (*p_data != '\0') {
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d1ec      	bne.n	8000cfe <USART2_print+0xa>
			;
	}
}
 8000d24:	bf00      	nop
 8000d26:	bf00      	nop
 8000d28:	370c      	adds	r7, #12
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	40004400 	.word	0x40004400

08000d38 <WATCHDOG_init>:
#include "watchdog.h"
#include "stm32f303xe.h"
#include "types.h"

void WATCHDOG_init(void) {
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0

	//Enable the IWDG by writing 0x0000CCCC in the IWDG_KR register(p. 759 in the reference-manual)
	IWDG->KR = 0x0000CCCC;
 8000d3c:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <WATCHDOG_init+0x38>)
 8000d3e:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8000d42:	601a      	str	r2, [r3, #0]
	//Enable register access by writing 0x00005555 in the IWDG_KR register(p. 759 in the reference-manual)
	IWDG->KR = 0x00005555;
 8000d44:	4b0a      	ldr	r3, [pc, #40]	; (8000d70 <WATCHDOG_init+0x38>)
 8000d46:	f245 5255 	movw	r2, #21845	; 0x5555
 8000d4a:	601a      	str	r2, [r3, #0]
	//Write the IWDG prescaler by programming IWDG_PR from 0 to 7(p. 759 in the reference-manual)
	IWDG->PR = 7;
 8000d4c:	4b08      	ldr	r3, [pc, #32]	; (8000d70 <WATCHDOG_init+0x38>)
 8000d4e:	2207      	movs	r2, #7
 8000d50:	605a      	str	r2, [r3, #4]
	//Write the reload register (IWDG_RLR)(p. 759 in the reference-manual)
	//IWDG->RLR = 0x00000FFF;
	IWDG->RLR = 8000000;
 8000d52:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <WATCHDOG_init+0x38>)
 8000d54:	4a07      	ldr	r2, [pc, #28]	; (8000d74 <WATCHDOG_init+0x3c>)
 8000d56:	609a      	str	r2, [r3, #8]
	//Wait for the registers to be updated (IWDG_SR = 0x00000000)(p. 759 in the reference-manual)
	while (IWDG->SR)
 8000d58:	bf00      	nop
 8000d5a:	4b05      	ldr	r3, [pc, #20]	; (8000d70 <WATCHDOG_init+0x38>)
 8000d5c:	68db      	ldr	r3, [r3, #12]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d1fb      	bne.n	8000d5a <WATCHDOG_init+0x22>
		;

}
 8000d62:	bf00      	nop
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	40003000 	.word	0x40003000
 8000d74:	007a1200 	.word	0x007a1200

08000d78 <WATCHDOG_pet>:
void WATCHDOG_pet(void) {
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
	//Refresh the counter value with IWDG_RLR (IWDG_KR = 0x0000AAAA).
	IWDG->KR = 0x0000AAAA;
 8000d7c:	4b04      	ldr	r3, [pc, #16]	; (8000d90 <WATCHDOG_pet+0x18>)
 8000d7e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8000d82:	601a      	str	r2, [r3, #0]
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	40003000 	.word	0x40003000

08000d94 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d94:	480d      	ldr	r0, [pc, #52]	; (8000dcc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d96:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000d98:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d9c:	480c      	ldr	r0, [pc, #48]	; (8000dd0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d9e:	490d      	ldr	r1, [pc, #52]	; (8000dd4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000da0:	4a0d      	ldr	r2, [pc, #52]	; (8000dd8 <LoopForever+0xe>)
  movs r3, #0
 8000da2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000da4:	e002      	b.n	8000dac <LoopCopyDataInit>

08000da6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000da6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000daa:	3304      	adds	r3, #4

08000dac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000db0:	d3f9      	bcc.n	8000da6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000db2:	4a0a      	ldr	r2, [pc, #40]	; (8000ddc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000db4:	4c0a      	ldr	r4, [pc, #40]	; (8000de0 <LoopForever+0x16>)
  movs r3, #0
 8000db6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db8:	e001      	b.n	8000dbe <LoopFillZerobss>

08000dba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dbc:	3204      	adds	r2, #4

08000dbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dc0:	d3fb      	bcc.n	8000dba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000dc2:	f000 f811 	bl	8000de8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dc6:	f7ff fbff 	bl	80005c8 <main>

08000dca <LoopForever>:

LoopForever:
    b LoopForever
 8000dca:	e7fe      	b.n	8000dca <LoopForever>
  ldr   r0, =_estack
 8000dcc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000dd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dd4:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000dd8:	08001944 	.word	0x08001944
  ldr r2, =_sbss
 8000ddc:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000de0:	20000960 	.word	0x20000960

08000de4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000de4:	e7fe      	b.n	8000de4 <ADC1_2_IRQHandler>
	...

08000de8 <__libc_init_array>:
 8000de8:	b570      	push	{r4, r5, r6, lr}
 8000dea:	4d0d      	ldr	r5, [pc, #52]	; (8000e20 <__libc_init_array+0x38>)
 8000dec:	4c0d      	ldr	r4, [pc, #52]	; (8000e24 <__libc_init_array+0x3c>)
 8000dee:	1b64      	subs	r4, r4, r5
 8000df0:	10a4      	asrs	r4, r4, #2
 8000df2:	2600      	movs	r6, #0
 8000df4:	42a6      	cmp	r6, r4
 8000df6:	d109      	bne.n	8000e0c <__libc_init_array+0x24>
 8000df8:	4d0b      	ldr	r5, [pc, #44]	; (8000e28 <__libc_init_array+0x40>)
 8000dfa:	4c0c      	ldr	r4, [pc, #48]	; (8000e2c <__libc_init_array+0x44>)
 8000dfc:	f000 fc82 	bl	8001704 <_init>
 8000e00:	1b64      	subs	r4, r4, r5
 8000e02:	10a4      	asrs	r4, r4, #2
 8000e04:	2600      	movs	r6, #0
 8000e06:	42a6      	cmp	r6, r4
 8000e08:	d105      	bne.n	8000e16 <__libc_init_array+0x2e>
 8000e0a:	bd70      	pop	{r4, r5, r6, pc}
 8000e0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e10:	4798      	blx	r3
 8000e12:	3601      	adds	r6, #1
 8000e14:	e7ee      	b.n	8000df4 <__libc_init_array+0xc>
 8000e16:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e1a:	4798      	blx	r3
 8000e1c:	3601      	adds	r6, #1
 8000e1e:	e7f2      	b.n	8000e06 <__libc_init_array+0x1e>
 8000e20:	0800193c 	.word	0x0800193c
 8000e24:	0800193c 	.word	0x0800193c
 8000e28:	0800193c 	.word	0x0800193c
 8000e2c:	08001940 	.word	0x08001940

08000e30 <strcat>:
 8000e30:	b510      	push	{r4, lr}
 8000e32:	4602      	mov	r2, r0
 8000e34:	7814      	ldrb	r4, [r2, #0]
 8000e36:	4613      	mov	r3, r2
 8000e38:	3201      	adds	r2, #1
 8000e3a:	2c00      	cmp	r4, #0
 8000e3c:	d1fa      	bne.n	8000e34 <strcat+0x4>
 8000e3e:	3b01      	subs	r3, #1
 8000e40:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000e44:	f803 2f01 	strb.w	r2, [r3, #1]!
 8000e48:	2a00      	cmp	r2, #0
 8000e4a:	d1f9      	bne.n	8000e40 <strcat+0x10>
 8000e4c:	bd10      	pop	{r4, pc}

08000e4e <strcpy>:
 8000e4e:	4603      	mov	r3, r0
 8000e50:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000e54:	f803 2b01 	strb.w	r2, [r3], #1
 8000e58:	2a00      	cmp	r2, #0
 8000e5a:	d1f9      	bne.n	8000e50 <strcpy+0x2>
 8000e5c:	4770      	bx	lr

08000e5e <strstr>:
 8000e5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e60:	780c      	ldrb	r4, [r1, #0]
 8000e62:	b164      	cbz	r4, 8000e7e <strstr+0x20>
 8000e64:	4603      	mov	r3, r0
 8000e66:	781a      	ldrb	r2, [r3, #0]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	1c5e      	adds	r6, r3, #1
 8000e6c:	b90a      	cbnz	r2, 8000e72 <strstr+0x14>
 8000e6e:	4610      	mov	r0, r2
 8000e70:	e005      	b.n	8000e7e <strstr+0x20>
 8000e72:	4294      	cmp	r4, r2
 8000e74:	d108      	bne.n	8000e88 <strstr+0x2a>
 8000e76:	460d      	mov	r5, r1
 8000e78:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8000e7c:	b902      	cbnz	r2, 8000e80 <strstr+0x22>
 8000e7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e80:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8000e84:	4297      	cmp	r7, r2
 8000e86:	d0f7      	beq.n	8000e78 <strstr+0x1a>
 8000e88:	4633      	mov	r3, r6
 8000e8a:	e7ec      	b.n	8000e66 <strstr+0x8>

08000e8c <_vsiprintf_r>:
 8000e8c:	b500      	push	{lr}
 8000e8e:	b09b      	sub	sp, #108	; 0x6c
 8000e90:	9100      	str	r1, [sp, #0]
 8000e92:	9104      	str	r1, [sp, #16]
 8000e94:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8000e98:	9105      	str	r1, [sp, #20]
 8000e9a:	9102      	str	r1, [sp, #8]
 8000e9c:	4905      	ldr	r1, [pc, #20]	; (8000eb4 <_vsiprintf_r+0x28>)
 8000e9e:	9103      	str	r1, [sp, #12]
 8000ea0:	4669      	mov	r1, sp
 8000ea2:	f000 f86f 	bl	8000f84 <_svfiprintf_r>
 8000ea6:	9b00      	ldr	r3, [sp, #0]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	701a      	strb	r2, [r3, #0]
 8000eac:	b01b      	add	sp, #108	; 0x6c
 8000eae:	f85d fb04 	ldr.w	pc, [sp], #4
 8000eb2:	bf00      	nop
 8000eb4:	ffff0208 	.word	0xffff0208

08000eb8 <vsiprintf>:
 8000eb8:	4613      	mov	r3, r2
 8000eba:	460a      	mov	r2, r1
 8000ebc:	4601      	mov	r1, r0
 8000ebe:	4802      	ldr	r0, [pc, #8]	; (8000ec8 <vsiprintf+0x10>)
 8000ec0:	6800      	ldr	r0, [r0, #0]
 8000ec2:	f7ff bfe3 	b.w	8000e8c <_vsiprintf_r>
 8000ec6:	bf00      	nop
 8000ec8:	20000000 	.word	0x20000000

08000ecc <__ssputs_r>:
 8000ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ed0:	688e      	ldr	r6, [r1, #8]
 8000ed2:	429e      	cmp	r6, r3
 8000ed4:	4682      	mov	sl, r0
 8000ed6:	460c      	mov	r4, r1
 8000ed8:	4690      	mov	r8, r2
 8000eda:	461f      	mov	r7, r3
 8000edc:	d838      	bhi.n	8000f50 <__ssputs_r+0x84>
 8000ede:	898a      	ldrh	r2, [r1, #12]
 8000ee0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8000ee4:	d032      	beq.n	8000f4c <__ssputs_r+0x80>
 8000ee6:	6825      	ldr	r5, [r4, #0]
 8000ee8:	6909      	ldr	r1, [r1, #16]
 8000eea:	eba5 0901 	sub.w	r9, r5, r1
 8000eee:	6965      	ldr	r5, [r4, #20]
 8000ef0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000ef4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000ef8:	3301      	adds	r3, #1
 8000efa:	444b      	add	r3, r9
 8000efc:	106d      	asrs	r5, r5, #1
 8000efe:	429d      	cmp	r5, r3
 8000f00:	bf38      	it	cc
 8000f02:	461d      	movcc	r5, r3
 8000f04:	0553      	lsls	r3, r2, #21
 8000f06:	d531      	bpl.n	8000f6c <__ssputs_r+0xa0>
 8000f08:	4629      	mov	r1, r5
 8000f0a:	f000 fb47 	bl	800159c <_malloc_r>
 8000f0e:	4606      	mov	r6, r0
 8000f10:	b950      	cbnz	r0, 8000f28 <__ssputs_r+0x5c>
 8000f12:	230c      	movs	r3, #12
 8000f14:	f8ca 3000 	str.w	r3, [sl]
 8000f18:	89a3      	ldrh	r3, [r4, #12]
 8000f1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f1e:	81a3      	strh	r3, [r4, #12]
 8000f20:	f04f 30ff 	mov.w	r0, #4294967295
 8000f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f28:	6921      	ldr	r1, [r4, #16]
 8000f2a:	464a      	mov	r2, r9
 8000f2c:	f000 fabe 	bl	80014ac <memcpy>
 8000f30:	89a3      	ldrh	r3, [r4, #12]
 8000f32:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8000f36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f3a:	81a3      	strh	r3, [r4, #12]
 8000f3c:	6126      	str	r6, [r4, #16]
 8000f3e:	6165      	str	r5, [r4, #20]
 8000f40:	444e      	add	r6, r9
 8000f42:	eba5 0509 	sub.w	r5, r5, r9
 8000f46:	6026      	str	r6, [r4, #0]
 8000f48:	60a5      	str	r5, [r4, #8]
 8000f4a:	463e      	mov	r6, r7
 8000f4c:	42be      	cmp	r6, r7
 8000f4e:	d900      	bls.n	8000f52 <__ssputs_r+0x86>
 8000f50:	463e      	mov	r6, r7
 8000f52:	4632      	mov	r2, r6
 8000f54:	6820      	ldr	r0, [r4, #0]
 8000f56:	4641      	mov	r1, r8
 8000f58:	f000 fab6 	bl	80014c8 <memmove>
 8000f5c:	68a3      	ldr	r3, [r4, #8]
 8000f5e:	6822      	ldr	r2, [r4, #0]
 8000f60:	1b9b      	subs	r3, r3, r6
 8000f62:	4432      	add	r2, r6
 8000f64:	60a3      	str	r3, [r4, #8]
 8000f66:	6022      	str	r2, [r4, #0]
 8000f68:	2000      	movs	r0, #0
 8000f6a:	e7db      	b.n	8000f24 <__ssputs_r+0x58>
 8000f6c:	462a      	mov	r2, r5
 8000f6e:	f000 fb6f 	bl	8001650 <_realloc_r>
 8000f72:	4606      	mov	r6, r0
 8000f74:	2800      	cmp	r0, #0
 8000f76:	d1e1      	bne.n	8000f3c <__ssputs_r+0x70>
 8000f78:	6921      	ldr	r1, [r4, #16]
 8000f7a:	4650      	mov	r0, sl
 8000f7c:	f000 fabe 	bl	80014fc <_free_r>
 8000f80:	e7c7      	b.n	8000f12 <__ssputs_r+0x46>
	...

08000f84 <_svfiprintf_r>:
 8000f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f88:	4698      	mov	r8, r3
 8000f8a:	898b      	ldrh	r3, [r1, #12]
 8000f8c:	061b      	lsls	r3, r3, #24
 8000f8e:	b09d      	sub	sp, #116	; 0x74
 8000f90:	4607      	mov	r7, r0
 8000f92:	460d      	mov	r5, r1
 8000f94:	4614      	mov	r4, r2
 8000f96:	d50e      	bpl.n	8000fb6 <_svfiprintf_r+0x32>
 8000f98:	690b      	ldr	r3, [r1, #16]
 8000f9a:	b963      	cbnz	r3, 8000fb6 <_svfiprintf_r+0x32>
 8000f9c:	2140      	movs	r1, #64	; 0x40
 8000f9e:	f000 fafd 	bl	800159c <_malloc_r>
 8000fa2:	6028      	str	r0, [r5, #0]
 8000fa4:	6128      	str	r0, [r5, #16]
 8000fa6:	b920      	cbnz	r0, 8000fb2 <_svfiprintf_r+0x2e>
 8000fa8:	230c      	movs	r3, #12
 8000faa:	603b      	str	r3, [r7, #0]
 8000fac:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb0:	e0d1      	b.n	8001156 <_svfiprintf_r+0x1d2>
 8000fb2:	2340      	movs	r3, #64	; 0x40
 8000fb4:	616b      	str	r3, [r5, #20]
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	9309      	str	r3, [sp, #36]	; 0x24
 8000fba:	2320      	movs	r3, #32
 8000fbc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000fc0:	f8cd 800c 	str.w	r8, [sp, #12]
 8000fc4:	2330      	movs	r3, #48	; 0x30
 8000fc6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8001170 <_svfiprintf_r+0x1ec>
 8000fca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000fce:	f04f 0901 	mov.w	r9, #1
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	469a      	mov	sl, r3
 8000fd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000fda:	b10a      	cbz	r2, 8000fe0 <_svfiprintf_r+0x5c>
 8000fdc:	2a25      	cmp	r2, #37	; 0x25
 8000fde:	d1f9      	bne.n	8000fd4 <_svfiprintf_r+0x50>
 8000fe0:	ebba 0b04 	subs.w	fp, sl, r4
 8000fe4:	d00b      	beq.n	8000ffe <_svfiprintf_r+0x7a>
 8000fe6:	465b      	mov	r3, fp
 8000fe8:	4622      	mov	r2, r4
 8000fea:	4629      	mov	r1, r5
 8000fec:	4638      	mov	r0, r7
 8000fee:	f7ff ff6d 	bl	8000ecc <__ssputs_r>
 8000ff2:	3001      	adds	r0, #1
 8000ff4:	f000 80aa 	beq.w	800114c <_svfiprintf_r+0x1c8>
 8000ff8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000ffa:	445a      	add	r2, fp
 8000ffc:	9209      	str	r2, [sp, #36]	; 0x24
 8000ffe:	f89a 3000 	ldrb.w	r3, [sl]
 8001002:	2b00      	cmp	r3, #0
 8001004:	f000 80a2 	beq.w	800114c <_svfiprintf_r+0x1c8>
 8001008:	2300      	movs	r3, #0
 800100a:	f04f 32ff 	mov.w	r2, #4294967295
 800100e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001012:	f10a 0a01 	add.w	sl, sl, #1
 8001016:	9304      	str	r3, [sp, #16]
 8001018:	9307      	str	r3, [sp, #28]
 800101a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800101e:	931a      	str	r3, [sp, #104]	; 0x68
 8001020:	4654      	mov	r4, sl
 8001022:	2205      	movs	r2, #5
 8001024:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001028:	4851      	ldr	r0, [pc, #324]	; (8001170 <_svfiprintf_r+0x1ec>)
 800102a:	f7ff f8f1 	bl	8000210 <memchr>
 800102e:	9a04      	ldr	r2, [sp, #16]
 8001030:	b9d8      	cbnz	r0, 800106a <_svfiprintf_r+0xe6>
 8001032:	06d0      	lsls	r0, r2, #27
 8001034:	bf44      	itt	mi
 8001036:	2320      	movmi	r3, #32
 8001038:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800103c:	0711      	lsls	r1, r2, #28
 800103e:	bf44      	itt	mi
 8001040:	232b      	movmi	r3, #43	; 0x2b
 8001042:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001046:	f89a 3000 	ldrb.w	r3, [sl]
 800104a:	2b2a      	cmp	r3, #42	; 0x2a
 800104c:	d015      	beq.n	800107a <_svfiprintf_r+0xf6>
 800104e:	9a07      	ldr	r2, [sp, #28]
 8001050:	4654      	mov	r4, sl
 8001052:	2000      	movs	r0, #0
 8001054:	f04f 0c0a 	mov.w	ip, #10
 8001058:	4621      	mov	r1, r4
 800105a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800105e:	3b30      	subs	r3, #48	; 0x30
 8001060:	2b09      	cmp	r3, #9
 8001062:	d94e      	bls.n	8001102 <_svfiprintf_r+0x17e>
 8001064:	b1b0      	cbz	r0, 8001094 <_svfiprintf_r+0x110>
 8001066:	9207      	str	r2, [sp, #28]
 8001068:	e014      	b.n	8001094 <_svfiprintf_r+0x110>
 800106a:	eba0 0308 	sub.w	r3, r0, r8
 800106e:	fa09 f303 	lsl.w	r3, r9, r3
 8001072:	4313      	orrs	r3, r2
 8001074:	9304      	str	r3, [sp, #16]
 8001076:	46a2      	mov	sl, r4
 8001078:	e7d2      	b.n	8001020 <_svfiprintf_r+0x9c>
 800107a:	9b03      	ldr	r3, [sp, #12]
 800107c:	1d19      	adds	r1, r3, #4
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	9103      	str	r1, [sp, #12]
 8001082:	2b00      	cmp	r3, #0
 8001084:	bfbb      	ittet	lt
 8001086:	425b      	neglt	r3, r3
 8001088:	f042 0202 	orrlt.w	r2, r2, #2
 800108c:	9307      	strge	r3, [sp, #28]
 800108e:	9307      	strlt	r3, [sp, #28]
 8001090:	bfb8      	it	lt
 8001092:	9204      	strlt	r2, [sp, #16]
 8001094:	7823      	ldrb	r3, [r4, #0]
 8001096:	2b2e      	cmp	r3, #46	; 0x2e
 8001098:	d10c      	bne.n	80010b4 <_svfiprintf_r+0x130>
 800109a:	7863      	ldrb	r3, [r4, #1]
 800109c:	2b2a      	cmp	r3, #42	; 0x2a
 800109e:	d135      	bne.n	800110c <_svfiprintf_r+0x188>
 80010a0:	9b03      	ldr	r3, [sp, #12]
 80010a2:	1d1a      	adds	r2, r3, #4
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	9203      	str	r2, [sp, #12]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	bfb8      	it	lt
 80010ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80010b0:	3402      	adds	r4, #2
 80010b2:	9305      	str	r3, [sp, #20]
 80010b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8001180 <_svfiprintf_r+0x1fc>
 80010b8:	7821      	ldrb	r1, [r4, #0]
 80010ba:	2203      	movs	r2, #3
 80010bc:	4650      	mov	r0, sl
 80010be:	f7ff f8a7 	bl	8000210 <memchr>
 80010c2:	b140      	cbz	r0, 80010d6 <_svfiprintf_r+0x152>
 80010c4:	2340      	movs	r3, #64	; 0x40
 80010c6:	eba0 000a 	sub.w	r0, r0, sl
 80010ca:	fa03 f000 	lsl.w	r0, r3, r0
 80010ce:	9b04      	ldr	r3, [sp, #16]
 80010d0:	4303      	orrs	r3, r0
 80010d2:	3401      	adds	r4, #1
 80010d4:	9304      	str	r3, [sp, #16]
 80010d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80010da:	4826      	ldr	r0, [pc, #152]	; (8001174 <_svfiprintf_r+0x1f0>)
 80010dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80010e0:	2206      	movs	r2, #6
 80010e2:	f7ff f895 	bl	8000210 <memchr>
 80010e6:	2800      	cmp	r0, #0
 80010e8:	d038      	beq.n	800115c <_svfiprintf_r+0x1d8>
 80010ea:	4b23      	ldr	r3, [pc, #140]	; (8001178 <_svfiprintf_r+0x1f4>)
 80010ec:	bb1b      	cbnz	r3, 8001136 <_svfiprintf_r+0x1b2>
 80010ee:	9b03      	ldr	r3, [sp, #12]
 80010f0:	3307      	adds	r3, #7
 80010f2:	f023 0307 	bic.w	r3, r3, #7
 80010f6:	3308      	adds	r3, #8
 80010f8:	9303      	str	r3, [sp, #12]
 80010fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80010fc:	4433      	add	r3, r6
 80010fe:	9309      	str	r3, [sp, #36]	; 0x24
 8001100:	e767      	b.n	8000fd2 <_svfiprintf_r+0x4e>
 8001102:	fb0c 3202 	mla	r2, ip, r2, r3
 8001106:	460c      	mov	r4, r1
 8001108:	2001      	movs	r0, #1
 800110a:	e7a5      	b.n	8001058 <_svfiprintf_r+0xd4>
 800110c:	2300      	movs	r3, #0
 800110e:	3401      	adds	r4, #1
 8001110:	9305      	str	r3, [sp, #20]
 8001112:	4619      	mov	r1, r3
 8001114:	f04f 0c0a 	mov.w	ip, #10
 8001118:	4620      	mov	r0, r4
 800111a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800111e:	3a30      	subs	r2, #48	; 0x30
 8001120:	2a09      	cmp	r2, #9
 8001122:	d903      	bls.n	800112c <_svfiprintf_r+0x1a8>
 8001124:	2b00      	cmp	r3, #0
 8001126:	d0c5      	beq.n	80010b4 <_svfiprintf_r+0x130>
 8001128:	9105      	str	r1, [sp, #20]
 800112a:	e7c3      	b.n	80010b4 <_svfiprintf_r+0x130>
 800112c:	fb0c 2101 	mla	r1, ip, r1, r2
 8001130:	4604      	mov	r4, r0
 8001132:	2301      	movs	r3, #1
 8001134:	e7f0      	b.n	8001118 <_svfiprintf_r+0x194>
 8001136:	ab03      	add	r3, sp, #12
 8001138:	9300      	str	r3, [sp, #0]
 800113a:	462a      	mov	r2, r5
 800113c:	4b0f      	ldr	r3, [pc, #60]	; (800117c <_svfiprintf_r+0x1f8>)
 800113e:	a904      	add	r1, sp, #16
 8001140:	4638      	mov	r0, r7
 8001142:	f3af 8000 	nop.w
 8001146:	1c42      	adds	r2, r0, #1
 8001148:	4606      	mov	r6, r0
 800114a:	d1d6      	bne.n	80010fa <_svfiprintf_r+0x176>
 800114c:	89ab      	ldrh	r3, [r5, #12]
 800114e:	065b      	lsls	r3, r3, #25
 8001150:	f53f af2c 	bmi.w	8000fac <_svfiprintf_r+0x28>
 8001154:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001156:	b01d      	add	sp, #116	; 0x74
 8001158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800115c:	ab03      	add	r3, sp, #12
 800115e:	9300      	str	r3, [sp, #0]
 8001160:	462a      	mov	r2, r5
 8001162:	4b06      	ldr	r3, [pc, #24]	; (800117c <_svfiprintf_r+0x1f8>)
 8001164:	a904      	add	r1, sp, #16
 8001166:	4638      	mov	r0, r7
 8001168:	f000 f87a 	bl	8001260 <_printf_i>
 800116c:	e7eb      	b.n	8001146 <_svfiprintf_r+0x1c2>
 800116e:	bf00      	nop
 8001170:	08001906 	.word	0x08001906
 8001174:	08001910 	.word	0x08001910
 8001178:	00000000 	.word	0x00000000
 800117c:	08000ecd 	.word	0x08000ecd
 8001180:	0800190c 	.word	0x0800190c

08001184 <_printf_common>:
 8001184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001188:	4616      	mov	r6, r2
 800118a:	4699      	mov	r9, r3
 800118c:	688a      	ldr	r2, [r1, #8]
 800118e:	690b      	ldr	r3, [r1, #16]
 8001190:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001194:	4293      	cmp	r3, r2
 8001196:	bfb8      	it	lt
 8001198:	4613      	movlt	r3, r2
 800119a:	6033      	str	r3, [r6, #0]
 800119c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80011a0:	4607      	mov	r7, r0
 80011a2:	460c      	mov	r4, r1
 80011a4:	b10a      	cbz	r2, 80011aa <_printf_common+0x26>
 80011a6:	3301      	adds	r3, #1
 80011a8:	6033      	str	r3, [r6, #0]
 80011aa:	6823      	ldr	r3, [r4, #0]
 80011ac:	0699      	lsls	r1, r3, #26
 80011ae:	bf42      	ittt	mi
 80011b0:	6833      	ldrmi	r3, [r6, #0]
 80011b2:	3302      	addmi	r3, #2
 80011b4:	6033      	strmi	r3, [r6, #0]
 80011b6:	6825      	ldr	r5, [r4, #0]
 80011b8:	f015 0506 	ands.w	r5, r5, #6
 80011bc:	d106      	bne.n	80011cc <_printf_common+0x48>
 80011be:	f104 0a19 	add.w	sl, r4, #25
 80011c2:	68e3      	ldr	r3, [r4, #12]
 80011c4:	6832      	ldr	r2, [r6, #0]
 80011c6:	1a9b      	subs	r3, r3, r2
 80011c8:	42ab      	cmp	r3, r5
 80011ca:	dc26      	bgt.n	800121a <_printf_common+0x96>
 80011cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80011d0:	1e13      	subs	r3, r2, #0
 80011d2:	6822      	ldr	r2, [r4, #0]
 80011d4:	bf18      	it	ne
 80011d6:	2301      	movne	r3, #1
 80011d8:	0692      	lsls	r2, r2, #26
 80011da:	d42b      	bmi.n	8001234 <_printf_common+0xb0>
 80011dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80011e0:	4649      	mov	r1, r9
 80011e2:	4638      	mov	r0, r7
 80011e4:	47c0      	blx	r8
 80011e6:	3001      	adds	r0, #1
 80011e8:	d01e      	beq.n	8001228 <_printf_common+0xa4>
 80011ea:	6823      	ldr	r3, [r4, #0]
 80011ec:	68e5      	ldr	r5, [r4, #12]
 80011ee:	6832      	ldr	r2, [r6, #0]
 80011f0:	f003 0306 	and.w	r3, r3, #6
 80011f4:	2b04      	cmp	r3, #4
 80011f6:	bf08      	it	eq
 80011f8:	1aad      	subeq	r5, r5, r2
 80011fa:	68a3      	ldr	r3, [r4, #8]
 80011fc:	6922      	ldr	r2, [r4, #16]
 80011fe:	bf0c      	ite	eq
 8001200:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001204:	2500      	movne	r5, #0
 8001206:	4293      	cmp	r3, r2
 8001208:	bfc4      	itt	gt
 800120a:	1a9b      	subgt	r3, r3, r2
 800120c:	18ed      	addgt	r5, r5, r3
 800120e:	2600      	movs	r6, #0
 8001210:	341a      	adds	r4, #26
 8001212:	42b5      	cmp	r5, r6
 8001214:	d11a      	bne.n	800124c <_printf_common+0xc8>
 8001216:	2000      	movs	r0, #0
 8001218:	e008      	b.n	800122c <_printf_common+0xa8>
 800121a:	2301      	movs	r3, #1
 800121c:	4652      	mov	r2, sl
 800121e:	4649      	mov	r1, r9
 8001220:	4638      	mov	r0, r7
 8001222:	47c0      	blx	r8
 8001224:	3001      	adds	r0, #1
 8001226:	d103      	bne.n	8001230 <_printf_common+0xac>
 8001228:	f04f 30ff 	mov.w	r0, #4294967295
 800122c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001230:	3501      	adds	r5, #1
 8001232:	e7c6      	b.n	80011c2 <_printf_common+0x3e>
 8001234:	18e1      	adds	r1, r4, r3
 8001236:	1c5a      	adds	r2, r3, #1
 8001238:	2030      	movs	r0, #48	; 0x30
 800123a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800123e:	4422      	add	r2, r4
 8001240:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001244:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001248:	3302      	adds	r3, #2
 800124a:	e7c7      	b.n	80011dc <_printf_common+0x58>
 800124c:	2301      	movs	r3, #1
 800124e:	4622      	mov	r2, r4
 8001250:	4649      	mov	r1, r9
 8001252:	4638      	mov	r0, r7
 8001254:	47c0      	blx	r8
 8001256:	3001      	adds	r0, #1
 8001258:	d0e6      	beq.n	8001228 <_printf_common+0xa4>
 800125a:	3601      	adds	r6, #1
 800125c:	e7d9      	b.n	8001212 <_printf_common+0x8e>
	...

08001260 <_printf_i>:
 8001260:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001264:	460c      	mov	r4, r1
 8001266:	4691      	mov	r9, r2
 8001268:	7e27      	ldrb	r7, [r4, #24]
 800126a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800126c:	2f78      	cmp	r7, #120	; 0x78
 800126e:	4680      	mov	r8, r0
 8001270:	469a      	mov	sl, r3
 8001272:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001276:	d807      	bhi.n	8001288 <_printf_i+0x28>
 8001278:	2f62      	cmp	r7, #98	; 0x62
 800127a:	d80a      	bhi.n	8001292 <_printf_i+0x32>
 800127c:	2f00      	cmp	r7, #0
 800127e:	f000 80d8 	beq.w	8001432 <_printf_i+0x1d2>
 8001282:	2f58      	cmp	r7, #88	; 0x58
 8001284:	f000 80a3 	beq.w	80013ce <_printf_i+0x16e>
 8001288:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800128c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001290:	e03a      	b.n	8001308 <_printf_i+0xa8>
 8001292:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001296:	2b15      	cmp	r3, #21
 8001298:	d8f6      	bhi.n	8001288 <_printf_i+0x28>
 800129a:	a001      	add	r0, pc, #4	; (adr r0, 80012a0 <_printf_i+0x40>)
 800129c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80012a0:	080012f9 	.word	0x080012f9
 80012a4:	0800130d 	.word	0x0800130d
 80012a8:	08001289 	.word	0x08001289
 80012ac:	08001289 	.word	0x08001289
 80012b0:	08001289 	.word	0x08001289
 80012b4:	08001289 	.word	0x08001289
 80012b8:	0800130d 	.word	0x0800130d
 80012bc:	08001289 	.word	0x08001289
 80012c0:	08001289 	.word	0x08001289
 80012c4:	08001289 	.word	0x08001289
 80012c8:	08001289 	.word	0x08001289
 80012cc:	08001419 	.word	0x08001419
 80012d0:	0800133d 	.word	0x0800133d
 80012d4:	080013fb 	.word	0x080013fb
 80012d8:	08001289 	.word	0x08001289
 80012dc:	08001289 	.word	0x08001289
 80012e0:	0800143b 	.word	0x0800143b
 80012e4:	08001289 	.word	0x08001289
 80012e8:	0800133d 	.word	0x0800133d
 80012ec:	08001289 	.word	0x08001289
 80012f0:	08001289 	.word	0x08001289
 80012f4:	08001403 	.word	0x08001403
 80012f8:	680b      	ldr	r3, [r1, #0]
 80012fa:	1d1a      	adds	r2, r3, #4
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	600a      	str	r2, [r1, #0]
 8001300:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001304:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001308:	2301      	movs	r3, #1
 800130a:	e0a3      	b.n	8001454 <_printf_i+0x1f4>
 800130c:	6825      	ldr	r5, [r4, #0]
 800130e:	6808      	ldr	r0, [r1, #0]
 8001310:	062e      	lsls	r6, r5, #24
 8001312:	f100 0304 	add.w	r3, r0, #4
 8001316:	d50a      	bpl.n	800132e <_printf_i+0xce>
 8001318:	6805      	ldr	r5, [r0, #0]
 800131a:	600b      	str	r3, [r1, #0]
 800131c:	2d00      	cmp	r5, #0
 800131e:	da03      	bge.n	8001328 <_printf_i+0xc8>
 8001320:	232d      	movs	r3, #45	; 0x2d
 8001322:	426d      	negs	r5, r5
 8001324:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001328:	485e      	ldr	r0, [pc, #376]	; (80014a4 <_printf_i+0x244>)
 800132a:	230a      	movs	r3, #10
 800132c:	e019      	b.n	8001362 <_printf_i+0x102>
 800132e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8001332:	6805      	ldr	r5, [r0, #0]
 8001334:	600b      	str	r3, [r1, #0]
 8001336:	bf18      	it	ne
 8001338:	b22d      	sxthne	r5, r5
 800133a:	e7ef      	b.n	800131c <_printf_i+0xbc>
 800133c:	680b      	ldr	r3, [r1, #0]
 800133e:	6825      	ldr	r5, [r4, #0]
 8001340:	1d18      	adds	r0, r3, #4
 8001342:	6008      	str	r0, [r1, #0]
 8001344:	0628      	lsls	r0, r5, #24
 8001346:	d501      	bpl.n	800134c <_printf_i+0xec>
 8001348:	681d      	ldr	r5, [r3, #0]
 800134a:	e002      	b.n	8001352 <_printf_i+0xf2>
 800134c:	0669      	lsls	r1, r5, #25
 800134e:	d5fb      	bpl.n	8001348 <_printf_i+0xe8>
 8001350:	881d      	ldrh	r5, [r3, #0]
 8001352:	4854      	ldr	r0, [pc, #336]	; (80014a4 <_printf_i+0x244>)
 8001354:	2f6f      	cmp	r7, #111	; 0x6f
 8001356:	bf0c      	ite	eq
 8001358:	2308      	moveq	r3, #8
 800135a:	230a      	movne	r3, #10
 800135c:	2100      	movs	r1, #0
 800135e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001362:	6866      	ldr	r6, [r4, #4]
 8001364:	60a6      	str	r6, [r4, #8]
 8001366:	2e00      	cmp	r6, #0
 8001368:	bfa2      	ittt	ge
 800136a:	6821      	ldrge	r1, [r4, #0]
 800136c:	f021 0104 	bicge.w	r1, r1, #4
 8001370:	6021      	strge	r1, [r4, #0]
 8001372:	b90d      	cbnz	r5, 8001378 <_printf_i+0x118>
 8001374:	2e00      	cmp	r6, #0
 8001376:	d04d      	beq.n	8001414 <_printf_i+0x1b4>
 8001378:	4616      	mov	r6, r2
 800137a:	fbb5 f1f3 	udiv	r1, r5, r3
 800137e:	fb03 5711 	mls	r7, r3, r1, r5
 8001382:	5dc7      	ldrb	r7, [r0, r7]
 8001384:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001388:	462f      	mov	r7, r5
 800138a:	42bb      	cmp	r3, r7
 800138c:	460d      	mov	r5, r1
 800138e:	d9f4      	bls.n	800137a <_printf_i+0x11a>
 8001390:	2b08      	cmp	r3, #8
 8001392:	d10b      	bne.n	80013ac <_printf_i+0x14c>
 8001394:	6823      	ldr	r3, [r4, #0]
 8001396:	07df      	lsls	r7, r3, #31
 8001398:	d508      	bpl.n	80013ac <_printf_i+0x14c>
 800139a:	6923      	ldr	r3, [r4, #16]
 800139c:	6861      	ldr	r1, [r4, #4]
 800139e:	4299      	cmp	r1, r3
 80013a0:	bfde      	ittt	le
 80013a2:	2330      	movle	r3, #48	; 0x30
 80013a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80013a8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80013ac:	1b92      	subs	r2, r2, r6
 80013ae:	6122      	str	r2, [r4, #16]
 80013b0:	f8cd a000 	str.w	sl, [sp]
 80013b4:	464b      	mov	r3, r9
 80013b6:	aa03      	add	r2, sp, #12
 80013b8:	4621      	mov	r1, r4
 80013ba:	4640      	mov	r0, r8
 80013bc:	f7ff fee2 	bl	8001184 <_printf_common>
 80013c0:	3001      	adds	r0, #1
 80013c2:	d14c      	bne.n	800145e <_printf_i+0x1fe>
 80013c4:	f04f 30ff 	mov.w	r0, #4294967295
 80013c8:	b004      	add	sp, #16
 80013ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013ce:	4835      	ldr	r0, [pc, #212]	; (80014a4 <_printf_i+0x244>)
 80013d0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80013d4:	6823      	ldr	r3, [r4, #0]
 80013d6:	680e      	ldr	r6, [r1, #0]
 80013d8:	061f      	lsls	r7, r3, #24
 80013da:	f856 5b04 	ldr.w	r5, [r6], #4
 80013de:	600e      	str	r6, [r1, #0]
 80013e0:	d514      	bpl.n	800140c <_printf_i+0x1ac>
 80013e2:	07d9      	lsls	r1, r3, #31
 80013e4:	bf44      	itt	mi
 80013e6:	f043 0320 	orrmi.w	r3, r3, #32
 80013ea:	6023      	strmi	r3, [r4, #0]
 80013ec:	b91d      	cbnz	r5, 80013f6 <_printf_i+0x196>
 80013ee:	6823      	ldr	r3, [r4, #0]
 80013f0:	f023 0320 	bic.w	r3, r3, #32
 80013f4:	6023      	str	r3, [r4, #0]
 80013f6:	2310      	movs	r3, #16
 80013f8:	e7b0      	b.n	800135c <_printf_i+0xfc>
 80013fa:	6823      	ldr	r3, [r4, #0]
 80013fc:	f043 0320 	orr.w	r3, r3, #32
 8001400:	6023      	str	r3, [r4, #0]
 8001402:	2378      	movs	r3, #120	; 0x78
 8001404:	4828      	ldr	r0, [pc, #160]	; (80014a8 <_printf_i+0x248>)
 8001406:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800140a:	e7e3      	b.n	80013d4 <_printf_i+0x174>
 800140c:	065e      	lsls	r6, r3, #25
 800140e:	bf48      	it	mi
 8001410:	b2ad      	uxthmi	r5, r5
 8001412:	e7e6      	b.n	80013e2 <_printf_i+0x182>
 8001414:	4616      	mov	r6, r2
 8001416:	e7bb      	b.n	8001390 <_printf_i+0x130>
 8001418:	680b      	ldr	r3, [r1, #0]
 800141a:	6826      	ldr	r6, [r4, #0]
 800141c:	6960      	ldr	r0, [r4, #20]
 800141e:	1d1d      	adds	r5, r3, #4
 8001420:	600d      	str	r5, [r1, #0]
 8001422:	0635      	lsls	r5, r6, #24
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	d501      	bpl.n	800142c <_printf_i+0x1cc>
 8001428:	6018      	str	r0, [r3, #0]
 800142a:	e002      	b.n	8001432 <_printf_i+0x1d2>
 800142c:	0671      	lsls	r1, r6, #25
 800142e:	d5fb      	bpl.n	8001428 <_printf_i+0x1c8>
 8001430:	8018      	strh	r0, [r3, #0]
 8001432:	2300      	movs	r3, #0
 8001434:	6123      	str	r3, [r4, #16]
 8001436:	4616      	mov	r6, r2
 8001438:	e7ba      	b.n	80013b0 <_printf_i+0x150>
 800143a:	680b      	ldr	r3, [r1, #0]
 800143c:	1d1a      	adds	r2, r3, #4
 800143e:	600a      	str	r2, [r1, #0]
 8001440:	681e      	ldr	r6, [r3, #0]
 8001442:	6862      	ldr	r2, [r4, #4]
 8001444:	2100      	movs	r1, #0
 8001446:	4630      	mov	r0, r6
 8001448:	f7fe fee2 	bl	8000210 <memchr>
 800144c:	b108      	cbz	r0, 8001452 <_printf_i+0x1f2>
 800144e:	1b80      	subs	r0, r0, r6
 8001450:	6060      	str	r0, [r4, #4]
 8001452:	6863      	ldr	r3, [r4, #4]
 8001454:	6123      	str	r3, [r4, #16]
 8001456:	2300      	movs	r3, #0
 8001458:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800145c:	e7a8      	b.n	80013b0 <_printf_i+0x150>
 800145e:	6923      	ldr	r3, [r4, #16]
 8001460:	4632      	mov	r2, r6
 8001462:	4649      	mov	r1, r9
 8001464:	4640      	mov	r0, r8
 8001466:	47d0      	blx	sl
 8001468:	3001      	adds	r0, #1
 800146a:	d0ab      	beq.n	80013c4 <_printf_i+0x164>
 800146c:	6823      	ldr	r3, [r4, #0]
 800146e:	079b      	lsls	r3, r3, #30
 8001470:	d413      	bmi.n	800149a <_printf_i+0x23a>
 8001472:	68e0      	ldr	r0, [r4, #12]
 8001474:	9b03      	ldr	r3, [sp, #12]
 8001476:	4298      	cmp	r0, r3
 8001478:	bfb8      	it	lt
 800147a:	4618      	movlt	r0, r3
 800147c:	e7a4      	b.n	80013c8 <_printf_i+0x168>
 800147e:	2301      	movs	r3, #1
 8001480:	4632      	mov	r2, r6
 8001482:	4649      	mov	r1, r9
 8001484:	4640      	mov	r0, r8
 8001486:	47d0      	blx	sl
 8001488:	3001      	adds	r0, #1
 800148a:	d09b      	beq.n	80013c4 <_printf_i+0x164>
 800148c:	3501      	adds	r5, #1
 800148e:	68e3      	ldr	r3, [r4, #12]
 8001490:	9903      	ldr	r1, [sp, #12]
 8001492:	1a5b      	subs	r3, r3, r1
 8001494:	42ab      	cmp	r3, r5
 8001496:	dcf2      	bgt.n	800147e <_printf_i+0x21e>
 8001498:	e7eb      	b.n	8001472 <_printf_i+0x212>
 800149a:	2500      	movs	r5, #0
 800149c:	f104 0619 	add.w	r6, r4, #25
 80014a0:	e7f5      	b.n	800148e <_printf_i+0x22e>
 80014a2:	bf00      	nop
 80014a4:	08001917 	.word	0x08001917
 80014a8:	08001928 	.word	0x08001928

080014ac <memcpy>:
 80014ac:	440a      	add	r2, r1
 80014ae:	4291      	cmp	r1, r2
 80014b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80014b4:	d100      	bne.n	80014b8 <memcpy+0xc>
 80014b6:	4770      	bx	lr
 80014b8:	b510      	push	{r4, lr}
 80014ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80014be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80014c2:	4291      	cmp	r1, r2
 80014c4:	d1f9      	bne.n	80014ba <memcpy+0xe>
 80014c6:	bd10      	pop	{r4, pc}

080014c8 <memmove>:
 80014c8:	4288      	cmp	r0, r1
 80014ca:	b510      	push	{r4, lr}
 80014cc:	eb01 0402 	add.w	r4, r1, r2
 80014d0:	d902      	bls.n	80014d8 <memmove+0x10>
 80014d2:	4284      	cmp	r4, r0
 80014d4:	4623      	mov	r3, r4
 80014d6:	d807      	bhi.n	80014e8 <memmove+0x20>
 80014d8:	1e43      	subs	r3, r0, #1
 80014da:	42a1      	cmp	r1, r4
 80014dc:	d008      	beq.n	80014f0 <memmove+0x28>
 80014de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80014e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80014e6:	e7f8      	b.n	80014da <memmove+0x12>
 80014e8:	4402      	add	r2, r0
 80014ea:	4601      	mov	r1, r0
 80014ec:	428a      	cmp	r2, r1
 80014ee:	d100      	bne.n	80014f2 <memmove+0x2a>
 80014f0:	bd10      	pop	{r4, pc}
 80014f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80014f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80014fa:	e7f7      	b.n	80014ec <memmove+0x24>

080014fc <_free_r>:
 80014fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80014fe:	2900      	cmp	r1, #0
 8001500:	d048      	beq.n	8001594 <_free_r+0x98>
 8001502:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001506:	9001      	str	r0, [sp, #4]
 8001508:	2b00      	cmp	r3, #0
 800150a:	f1a1 0404 	sub.w	r4, r1, #4
 800150e:	bfb8      	it	lt
 8001510:	18e4      	addlt	r4, r4, r3
 8001512:	f000 f8d3 	bl	80016bc <__malloc_lock>
 8001516:	4a20      	ldr	r2, [pc, #128]	; (8001598 <_free_r+0x9c>)
 8001518:	9801      	ldr	r0, [sp, #4]
 800151a:	6813      	ldr	r3, [r2, #0]
 800151c:	4615      	mov	r5, r2
 800151e:	b933      	cbnz	r3, 800152e <_free_r+0x32>
 8001520:	6063      	str	r3, [r4, #4]
 8001522:	6014      	str	r4, [r2, #0]
 8001524:	b003      	add	sp, #12
 8001526:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800152a:	f000 b8cd 	b.w	80016c8 <__malloc_unlock>
 800152e:	42a3      	cmp	r3, r4
 8001530:	d90b      	bls.n	800154a <_free_r+0x4e>
 8001532:	6821      	ldr	r1, [r4, #0]
 8001534:	1862      	adds	r2, r4, r1
 8001536:	4293      	cmp	r3, r2
 8001538:	bf04      	itt	eq
 800153a:	681a      	ldreq	r2, [r3, #0]
 800153c:	685b      	ldreq	r3, [r3, #4]
 800153e:	6063      	str	r3, [r4, #4]
 8001540:	bf04      	itt	eq
 8001542:	1852      	addeq	r2, r2, r1
 8001544:	6022      	streq	r2, [r4, #0]
 8001546:	602c      	str	r4, [r5, #0]
 8001548:	e7ec      	b.n	8001524 <_free_r+0x28>
 800154a:	461a      	mov	r2, r3
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	b10b      	cbz	r3, 8001554 <_free_r+0x58>
 8001550:	42a3      	cmp	r3, r4
 8001552:	d9fa      	bls.n	800154a <_free_r+0x4e>
 8001554:	6811      	ldr	r1, [r2, #0]
 8001556:	1855      	adds	r5, r2, r1
 8001558:	42a5      	cmp	r5, r4
 800155a:	d10b      	bne.n	8001574 <_free_r+0x78>
 800155c:	6824      	ldr	r4, [r4, #0]
 800155e:	4421      	add	r1, r4
 8001560:	1854      	adds	r4, r2, r1
 8001562:	42a3      	cmp	r3, r4
 8001564:	6011      	str	r1, [r2, #0]
 8001566:	d1dd      	bne.n	8001524 <_free_r+0x28>
 8001568:	681c      	ldr	r4, [r3, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	6053      	str	r3, [r2, #4]
 800156e:	4421      	add	r1, r4
 8001570:	6011      	str	r1, [r2, #0]
 8001572:	e7d7      	b.n	8001524 <_free_r+0x28>
 8001574:	d902      	bls.n	800157c <_free_r+0x80>
 8001576:	230c      	movs	r3, #12
 8001578:	6003      	str	r3, [r0, #0]
 800157a:	e7d3      	b.n	8001524 <_free_r+0x28>
 800157c:	6825      	ldr	r5, [r4, #0]
 800157e:	1961      	adds	r1, r4, r5
 8001580:	428b      	cmp	r3, r1
 8001582:	bf04      	itt	eq
 8001584:	6819      	ldreq	r1, [r3, #0]
 8001586:	685b      	ldreq	r3, [r3, #4]
 8001588:	6063      	str	r3, [r4, #4]
 800158a:	bf04      	itt	eq
 800158c:	1949      	addeq	r1, r1, r5
 800158e:	6021      	streq	r1, [r4, #0]
 8001590:	6054      	str	r4, [r2, #4]
 8001592:	e7c7      	b.n	8001524 <_free_r+0x28>
 8001594:	b003      	add	sp, #12
 8001596:	bd30      	pop	{r4, r5, pc}
 8001598:	20000944 	.word	0x20000944

0800159c <_malloc_r>:
 800159c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800159e:	1ccd      	adds	r5, r1, #3
 80015a0:	f025 0503 	bic.w	r5, r5, #3
 80015a4:	3508      	adds	r5, #8
 80015a6:	2d0c      	cmp	r5, #12
 80015a8:	bf38      	it	cc
 80015aa:	250c      	movcc	r5, #12
 80015ac:	2d00      	cmp	r5, #0
 80015ae:	4606      	mov	r6, r0
 80015b0:	db01      	blt.n	80015b6 <_malloc_r+0x1a>
 80015b2:	42a9      	cmp	r1, r5
 80015b4:	d903      	bls.n	80015be <_malloc_r+0x22>
 80015b6:	230c      	movs	r3, #12
 80015b8:	6033      	str	r3, [r6, #0]
 80015ba:	2000      	movs	r0, #0
 80015bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80015be:	f000 f87d 	bl	80016bc <__malloc_lock>
 80015c2:	4921      	ldr	r1, [pc, #132]	; (8001648 <_malloc_r+0xac>)
 80015c4:	680a      	ldr	r2, [r1, #0]
 80015c6:	4614      	mov	r4, r2
 80015c8:	b99c      	cbnz	r4, 80015f2 <_malloc_r+0x56>
 80015ca:	4f20      	ldr	r7, [pc, #128]	; (800164c <_malloc_r+0xb0>)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	b923      	cbnz	r3, 80015da <_malloc_r+0x3e>
 80015d0:	4621      	mov	r1, r4
 80015d2:	4630      	mov	r0, r6
 80015d4:	f000 f862 	bl	800169c <_sbrk_r>
 80015d8:	6038      	str	r0, [r7, #0]
 80015da:	4629      	mov	r1, r5
 80015dc:	4630      	mov	r0, r6
 80015de:	f000 f85d 	bl	800169c <_sbrk_r>
 80015e2:	1c43      	adds	r3, r0, #1
 80015e4:	d123      	bne.n	800162e <_malloc_r+0x92>
 80015e6:	230c      	movs	r3, #12
 80015e8:	6033      	str	r3, [r6, #0]
 80015ea:	4630      	mov	r0, r6
 80015ec:	f000 f86c 	bl	80016c8 <__malloc_unlock>
 80015f0:	e7e3      	b.n	80015ba <_malloc_r+0x1e>
 80015f2:	6823      	ldr	r3, [r4, #0]
 80015f4:	1b5b      	subs	r3, r3, r5
 80015f6:	d417      	bmi.n	8001628 <_malloc_r+0x8c>
 80015f8:	2b0b      	cmp	r3, #11
 80015fa:	d903      	bls.n	8001604 <_malloc_r+0x68>
 80015fc:	6023      	str	r3, [r4, #0]
 80015fe:	441c      	add	r4, r3
 8001600:	6025      	str	r5, [r4, #0]
 8001602:	e004      	b.n	800160e <_malloc_r+0x72>
 8001604:	6863      	ldr	r3, [r4, #4]
 8001606:	42a2      	cmp	r2, r4
 8001608:	bf0c      	ite	eq
 800160a:	600b      	streq	r3, [r1, #0]
 800160c:	6053      	strne	r3, [r2, #4]
 800160e:	4630      	mov	r0, r6
 8001610:	f000 f85a 	bl	80016c8 <__malloc_unlock>
 8001614:	f104 000b 	add.w	r0, r4, #11
 8001618:	1d23      	adds	r3, r4, #4
 800161a:	f020 0007 	bic.w	r0, r0, #7
 800161e:	1ac2      	subs	r2, r0, r3
 8001620:	d0cc      	beq.n	80015bc <_malloc_r+0x20>
 8001622:	1a1b      	subs	r3, r3, r0
 8001624:	50a3      	str	r3, [r4, r2]
 8001626:	e7c9      	b.n	80015bc <_malloc_r+0x20>
 8001628:	4622      	mov	r2, r4
 800162a:	6864      	ldr	r4, [r4, #4]
 800162c:	e7cc      	b.n	80015c8 <_malloc_r+0x2c>
 800162e:	1cc4      	adds	r4, r0, #3
 8001630:	f024 0403 	bic.w	r4, r4, #3
 8001634:	42a0      	cmp	r0, r4
 8001636:	d0e3      	beq.n	8001600 <_malloc_r+0x64>
 8001638:	1a21      	subs	r1, r4, r0
 800163a:	4630      	mov	r0, r6
 800163c:	f000 f82e 	bl	800169c <_sbrk_r>
 8001640:	3001      	adds	r0, #1
 8001642:	d1dd      	bne.n	8001600 <_malloc_r+0x64>
 8001644:	e7cf      	b.n	80015e6 <_malloc_r+0x4a>
 8001646:	bf00      	nop
 8001648:	20000944 	.word	0x20000944
 800164c:	20000948 	.word	0x20000948

08001650 <_realloc_r>:
 8001650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001652:	4607      	mov	r7, r0
 8001654:	4614      	mov	r4, r2
 8001656:	460e      	mov	r6, r1
 8001658:	b921      	cbnz	r1, 8001664 <_realloc_r+0x14>
 800165a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800165e:	4611      	mov	r1, r2
 8001660:	f7ff bf9c 	b.w	800159c <_malloc_r>
 8001664:	b922      	cbnz	r2, 8001670 <_realloc_r+0x20>
 8001666:	f7ff ff49 	bl	80014fc <_free_r>
 800166a:	4625      	mov	r5, r4
 800166c:	4628      	mov	r0, r5
 800166e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001670:	f000 f830 	bl	80016d4 <_malloc_usable_size_r>
 8001674:	42a0      	cmp	r0, r4
 8001676:	d20f      	bcs.n	8001698 <_realloc_r+0x48>
 8001678:	4621      	mov	r1, r4
 800167a:	4638      	mov	r0, r7
 800167c:	f7ff ff8e 	bl	800159c <_malloc_r>
 8001680:	4605      	mov	r5, r0
 8001682:	2800      	cmp	r0, #0
 8001684:	d0f2      	beq.n	800166c <_realloc_r+0x1c>
 8001686:	4631      	mov	r1, r6
 8001688:	4622      	mov	r2, r4
 800168a:	f7ff ff0f 	bl	80014ac <memcpy>
 800168e:	4631      	mov	r1, r6
 8001690:	4638      	mov	r0, r7
 8001692:	f7ff ff33 	bl	80014fc <_free_r>
 8001696:	e7e9      	b.n	800166c <_realloc_r+0x1c>
 8001698:	4635      	mov	r5, r6
 800169a:	e7e7      	b.n	800166c <_realloc_r+0x1c>

0800169c <_sbrk_r>:
 800169c:	b538      	push	{r3, r4, r5, lr}
 800169e:	4d06      	ldr	r5, [pc, #24]	; (80016b8 <_sbrk_r+0x1c>)
 80016a0:	2300      	movs	r3, #0
 80016a2:	4604      	mov	r4, r0
 80016a4:	4608      	mov	r0, r1
 80016a6:	602b      	str	r3, [r5, #0]
 80016a8:	f000 f81e 	bl	80016e8 <_sbrk>
 80016ac:	1c43      	adds	r3, r0, #1
 80016ae:	d102      	bne.n	80016b6 <_sbrk_r+0x1a>
 80016b0:	682b      	ldr	r3, [r5, #0]
 80016b2:	b103      	cbz	r3, 80016b6 <_sbrk_r+0x1a>
 80016b4:	6023      	str	r3, [r4, #0]
 80016b6:	bd38      	pop	{r3, r4, r5, pc}
 80016b8:	20000950 	.word	0x20000950

080016bc <__malloc_lock>:
 80016bc:	4801      	ldr	r0, [pc, #4]	; (80016c4 <__malloc_lock+0x8>)
 80016be:	f000 b811 	b.w	80016e4 <__retarget_lock_acquire_recursive>
 80016c2:	bf00      	nop
 80016c4:	20000958 	.word	0x20000958

080016c8 <__malloc_unlock>:
 80016c8:	4801      	ldr	r0, [pc, #4]	; (80016d0 <__malloc_unlock+0x8>)
 80016ca:	f000 b80c 	b.w	80016e6 <__retarget_lock_release_recursive>
 80016ce:	bf00      	nop
 80016d0:	20000958 	.word	0x20000958

080016d4 <_malloc_usable_size_r>:
 80016d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80016d8:	1f18      	subs	r0, r3, #4
 80016da:	2b00      	cmp	r3, #0
 80016dc:	bfbc      	itt	lt
 80016de:	580b      	ldrlt	r3, [r1, r0]
 80016e0:	18c0      	addlt	r0, r0, r3
 80016e2:	4770      	bx	lr

080016e4 <__retarget_lock_acquire_recursive>:
 80016e4:	4770      	bx	lr

080016e6 <__retarget_lock_release_recursive>:
 80016e6:	4770      	bx	lr

080016e8 <_sbrk>:
 80016e8:	4b04      	ldr	r3, [pc, #16]	; (80016fc <_sbrk+0x14>)
 80016ea:	6819      	ldr	r1, [r3, #0]
 80016ec:	4602      	mov	r2, r0
 80016ee:	b909      	cbnz	r1, 80016f4 <_sbrk+0xc>
 80016f0:	4903      	ldr	r1, [pc, #12]	; (8001700 <_sbrk+0x18>)
 80016f2:	6019      	str	r1, [r3, #0]
 80016f4:	6818      	ldr	r0, [r3, #0]
 80016f6:	4402      	add	r2, r0
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	4770      	bx	lr
 80016fc:	2000094c 	.word	0x2000094c
 8001700:	20000960 	.word	0x20000960

08001704 <_init>:
 8001704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001706:	bf00      	nop
 8001708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800170a:	bc08      	pop	{r3}
 800170c:	469e      	mov	lr, r3
 800170e:	4770      	bx	lr

08001710 <_fini>:
 8001710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001712:	bf00      	nop
 8001714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001716:	bc08      	pop	{r3}
 8001718:	469e      	mov	lr, r3
 800171a:	4770      	bx	lr
